# David's Notes for Fixes, Improvements and Enhancements

Fix:
- Pretty Printer. I think it's buggy. There is a branch where I'm most the way
  through solving it. Consider refactoring and adding test suite along the way.

Refactor:
- Parser Library:
  - Reorganize, document, and give better variable names to things.
- For core data structures (e.g., Iter), split out:
  - Public API (in tutorial style)
  - Test Suite
- Make `Monad` a super class of all of the monad effect classes (via Val)
- Replace all the template haskell stuff with Generics
- Fuzzing Library:
  - Rename `Shrinky` to `Shrink`

Improve:
- Work on Chunky

New Feature:
- Parser Library: 
  - allow for two categories of errors, "invalid token" error (as
    is not), and "validation error". Validation error should underline in red
    '^'s the piece of syntax that failed to validate, in addition to a message
    as to why.
  - when color is off, print red '^'s as '!'s. (Requires new feature in pretty
    printer that allows pretty printers to change their behavior for when color
    is turned off.)
  - combine `<parser>` and `<parser>WS` functionality into a single interface
    (likely some sort of typeclass)
  - lexer doesn't properly support character tokens
- Substitution Library:
  - in SubstElem type, support delayed shifts in addition to delayed incrs.
    Right now the representation is `s ⇰ ℕ64`, which means "for each ⟨s,n⟩, do
    an increment substitution in scope s for number of variables n" This should
    really be `s ⇰ ℕ64 ⇰ ℕ64` which means "for each ⟨s,ρ,n⟩, do a shifted
    increment substitution in scope s for shift level ρ and number of variables
    n".
  - Support the ability for the user's expression type to embed SSubstElem (or
    SubstElem, and combined with the usual var type, provide a prism into
    SSubstElem). This would allow applying an increment substitution to an
    expression to lazily evaluate it, so you could do `canon $ incr 1 $ incr 1
    e` and it would only traverse the expression once to push through the
    increment logic.
  - Make substitution failure a proper error type with Doc error message that
    describes failure, rather than just an option
  - change printing and parsing of "x:0…x:4" to be "x:0…4"
  - add something like:

        dbindUnusedSubst ∷ (Ord s) ⇒ s → Subst s e

    to go along with the current

        dbindSubst ∷ (Ord s) ⇒ s → e → Subst s e

    (+ variants for named substitutions...)
    and where `dbindUnusedSubst` just puts a `None` in the substitution vector.
  - longer term, would e good to differentiate between "substitution failed"
    and "we expect this variable to not exist in whatever we apply this
    substitution to", as after adopting prior bullet, these are both
    represented as `None` in the substitution vector.
- Streams and Iterators that perform monadic actions "as they go"

Test Suite Needed:
- Parser Library
- Pretty Printer Library

Other:
- Turn on QualifiedDo

Naming Conventions:
  - convThingAToThingB -- A → B
  - convThingBToThingA -- B → A

  - makeThingAFrThingB -- B → A
  - viewThingBInThingA -- A → 𝑂 B
  - thingAToThingBL    -- A ⌲ B

  - projThingAToThingB -- A → B
  - altrThingBInThingA -- (B → B) → A → A
  - thingAToThingBL    -- A ⟢ B

  - fieldNameL
  - constNameL

Small things to fix:
  - whenM should take a delayed argument
  - make lazy lists instance of csized

Things to Rename:
  - errMsg
  - pow𝑃 -> pow
  - deconflict `cpName` in `CParser.hs` with `pName` and notion of `Name` in
    substitution library
