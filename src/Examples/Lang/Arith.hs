module Examples.Lang.Arith where

import UVMHS

syntax ‚à∑ Syntax
syntax = concat
  [ syntaxPuns ["(",")"]
  , syntaxOprs ["==","+","*","-","^","!"]
  ]

lExp ‚à∑ Lexer
lExp = mkLexer $ LexerArgs False syntax

testTokenizerSuccess ‚à∑ IO ()
testTokenizerSuccess = lexIOMain lExp "<>" "1 + 2 - 3 * 4 ^ 5 ! == 1 \n -- blah blah \n {- ml {{- ml --}-} -- blah\nb"

data Lit =
    IntegerL ‚Ñ§
  | DoubleL ùîª
  | StringL ùïä
makePrettySum ''Lit

data Atom =
    LitA Lit
  | NameA ùïä
makePrettySum ''Atom

type Exp = ùê¥ SrcCxt ExpPre
data ExpPre =
    AtomE Atom
  | PlusE Exp Exp
  | TimesE Exp Exp
  | ExpoE Exp Exp
  | FactE Exp
  | NegateE Exp
  | EqualE Exp Exp
makePrisms ''ExpPre
makePrettySum ''ExpPre

pLit ‚à∑ Parser Lit
pLit = tries
  [ IntegerL ^$ pTokInt
  , DoubleL ^$ pTokDouble
  , StringL ^$ pTokString
  ]

pAtom ‚à∑ Parser Atom
pAtom = pNewContext "atom" $ tries
  [ LitA ^$ pLit
  , NameA ^$ pTokName
  ]

pExp ‚à∑ Parser Exp
pExp = mixfix id "exp" $ concat
  [ mixTerminal $ do
      pTokSyntax "("
      e ‚Üê pExp
      pTokSyntax "("
      return $ extract e
  , mixTerminal       $ AtomE         ^$ pAtom
  , mixInfix   pCMP   $ const (return ‚àò‚àò EqualE ) ^$ pTokSyntax "=="
  , mixInfixR  pPLUS  $ const (return ‚àò‚àò PlusE  ) ^$ pTokSyntax "+"
  , mixInfixR  pTIMES $ const (return ‚àò‚àò TimesE ) ^$ pTokSyntax "*"
  , mixPrefix  pNEG   $ const (return ‚àò  NegateE) ^$ pTokSyntax "-"
  , mixInfixL  pPOW   $ const (return ‚àò‚àò ExpoE  ) ^$ pTokSyntax "^"
  , mixPostfix pFAC   $ const (return ‚àò  FactE  ) ^$ pTokSyntax "!"
  ]

testParserSuccess ‚à∑ IO ()
testParserSuccess = lexParseIOMain lExp pExp "<>" "(- 1) + - 2 + 3 * 4 ^ 5 ^ 6 !"

testParserFailure1 ‚à∑ IO ()
testParserFailure1 = lexParseIOMain lExp pExp "<>" "((9 == ((- 1))) + 2 + 3 * 4 ^ 5 ^ 6 !))"

testParserFailure2 ‚à∑ IO ()
testParserFailure2 = lexParseIOMain lExp pExp "<>" "(((((- 1))) + 2 + 3 * 4 ^ 5 ^ ! == 0))"
