-- ================ --
-- TEMPLATE HASKELL --
-- ================ --

import qualified Language.Haskell.TH as TH
import qualified Language.Haskell.TH.Syntax as TH

import qualified Prelude as HS
import qualified Data.List.NonEmpty as HS (NonEmpty(..)) 
import Prelude (Maybe(..))

---------------------
-- GENERAL HELPERS --
---------------------

thGensym ‚à∑ TH.Q TH.Name
thGensym = TH.newName $ tohsChars "x"

thTupsT ‚à∑ [TH.Type] ‚Üí TH.Type
thTupsT œÑs = apply TH.AppT (TH.TupleT (HS.length œÑs)) œÑs

thTupsTQ ‚à∑ [TH.TypeQ] ‚Üí TH.TypeQ
thTupsTQ œÑQs = do
  œÑs ‚Üê exchange œÑQs
  return $ thTupsT œÑs

thTyVarBndrName ‚à∑ ‚àÄ flag. TH.TyVarBndr flag ‚Üí TH.Name
thTyVarBndrName = \case
  TH.PlainTV (name ‚à∑ TH.Name) (_flag ‚à∑ flag) ‚Üí name
  TH.KindedTV (name ‚à∑ TH.Name) (_flag ‚à∑ flag) (_kind ‚à∑ TH.Kind) ‚Üí name

thNameString ‚à∑ TH.Name ‚Üí ùïä
thNameString (TH.Name (occName ‚à∑ TH.OccName) (_nameFlavor ‚à∑ TH.NameFlavour)) = let TH.OccName s = occName in string s

thShowDecs ‚à∑ TH.DecsQ ‚Üí TH.ExpQ
thShowDecs decsQ = do
  decs ‚Üê decsQ
  let s = TH.pprint decs
  [| s |]

thAllTermNamesTypeWith ‚à∑ (TH.Name ‚Üí ùîπ) ‚Üí TH.Type ‚Üí ùëÉ TH.Name
thAllTermNamesTypeWith f = 
  let loop = \case
        TH.ForallT (_tyVarBndrs ‚à∑ [TH.TyVarBndr TH.Specificity]) (_cxt ‚à∑ TH.Cxt) (ty ‚à∑ TH.Type) ‚Üí loop ty
        TH.ForallVisT (_tyVarBndrs ‚à∑ [TH.TyVarBndr ()]) (ty ‚à∑ TH.Type) ‚Üí loop ty
        TH.AppT (ty‚ÇÅ ‚à∑ TH.Type) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí unions [loop ty‚ÇÅ,loop ty‚ÇÇ]
        TH.AppKindT (ty ‚à∑ TH.Type) (_kind ‚à∑ TH.Kind) ‚Üí loop ty
        TH.SigT (ty ‚à∑ TH.Type) (_kind ‚à∑ TH.Kind) ‚Üí loop ty
        TH.VarT (name ‚à∑ TH.Name) ‚Üí if f name then single name else null
        TH.ConT (name ‚à∑ TH.Name) ‚Üí if f name then single name else null
        TH.PromotedT (_name ‚à∑ TH.Name) ‚Üí null
        TH.InfixT (ty‚ÇÅ ‚à∑ TH.Type) (name ‚à∑ TH.Name) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí unions [if f name then single name else null,loop ty‚ÇÅ,loop ty‚ÇÇ]
        TH.UInfixT (ty‚ÇÅ ‚à∑ TH.Type) (name ‚à∑ TH.Name) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí unions [if f name then single name else null,loop ty‚ÇÅ,loop ty‚ÇÇ]
        TH.PromotedInfixT (_ty‚ÇÅ ‚à∑ TH.Type) (_name ‚à∑ TH.Name) (_ty‚ÇÇ ‚à∑ TH.Type) ‚Üí null
        TH.PromotedUInfixT (_ty‚ÇÅ ‚à∑ TH.Type) (_name ‚à∑ TH.Name) (_ty‚ÇÇ ‚à∑ TH.Type) ‚Üí null
        TH.ParensT (ty ‚à∑ TH.Type) ‚Üí loop ty
        TH.TupleT (_i ‚à∑ HS.Int) ‚Üí null
        TH.UnboxedTupleT (_i ‚à∑ HS.Int) ‚Üí null
        TH.UnboxedSumT (_i ‚à∑ HS.Int) ‚Üí null
        TH.ArrowT ‚Üí null
        TH.MulArrowT ‚Üí null
        TH.EqualityT ‚Üí null
        TH.ListT ‚Üí null
        TH.PromotedTupleT (_i ‚à∑ HS.Int) ‚Üí null
        TH.PromotedNilT ‚Üí null
        TH.PromotedConsT ‚Üí null
        TH.StarT ‚Üí null
        TH.ConstraintT ‚Üí null
        TH.LitT (_l ‚à∑ TH.TyLit) ‚Üí null
        TH.WildCardT ‚Üí null
        TH.ImplicitParamT (_s ‚à∑ HS.String) (ty ‚à∑ TH.Type) ‚Üí loop ty
  in loop

thAnyNameOccursInType ‚à∑ ùëÉ TH.Name ‚Üí TH.Type ‚Üí ùîπ
thAnyNameOccursInType names œÑ  = thAllTermNamesTypeWith (‚àà names) œÑ ‚â¢ null

------------------------
-- STRIP MODULE NAMES --
------------------------

thStripModuleNamesNameFlavour ‚à∑ TH.NameFlavour ‚Üí TH.NameFlavour
thStripModuleNamesNameFlavour = \case
  TH.NameS ‚Üí 
    TH.NameS
  TH.NameQ (modName ‚à∑ TH.ModName) ‚Üí
    TH.NameQ modName
  TH.NameU (uniq ‚à∑ TH.Uniq) ‚Üí
    TH.NameU uniq
  TH.NameL (uniq ‚à∑ TH.Uniq) ‚Üí
    TH.NameL uniq
  -- THE PRIMARY OPERATION
  TH.NameG (_nameSpace ‚à∑ TH.NameSpace) (_pkgName ‚à∑ TH.PkgName) (_modName ‚à∑ TH.ModName) ‚Üí
    TH.NameS

thStripModuleNamesName ‚à∑ TH.Name ‚Üí TH.Name
thStripModuleNamesName = \case
  TH.Name (occName ‚à∑ TH.OccName) (nameFlavor ‚à∑ TH.NameFlavour) ‚Üí
    TH.Name occName $ thStripModuleNamesNameFlavour nameFlavor

thStripModuleNamesTyVarBndr ‚à∑ ‚àÄ flag. TH.TyVarBndr flag ‚Üí TH.TyVarBndr flag
thStripModuleNamesTyVarBndr = \case
  TH.PlainTV (name ‚à∑ TH.Name) (flag ‚à∑ flag) ‚Üí
    TH.PlainTV (thStripModuleNamesName name) flag
  TH.KindedTV (name ‚à∑ TH.Name) (flag ‚à∑ flag) (kind ‚à∑ TH.Kind) ‚Üí
    TH.KindedTV (thStripModuleNamesName name) flag $ thStripModuleNamesType kind

thStripModuleNamesType ‚à∑ TH.Type ‚Üí TH.Type
thStripModuleNamesType = \case
  TH.ForallT (tyVarBndrs ‚à∑ [TH.TyVarBndr TH.Specificity]) (cxt ‚à∑ TH.Cxt) (ty ‚à∑ TH.Type) ‚Üí 
    TH.ForallT (map thStripModuleNamesTyVarBndr tyVarBndrs) (map thStripModuleNamesType cxt) $ thStripModuleNamesType ty
  TH.ForallVisT (tyVarBndrs ‚à∑ [TH.TyVarBndr ()]) (ty ‚à∑ TH.Type) ‚Üí 
    TH.ForallVisT (map thStripModuleNamesTyVarBndr tyVarBndrs) $ thStripModuleNamesType ty
  TH.AppT (ty‚ÇÅ ‚à∑ TH.Type) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí TH.AppT (thStripModuleNamesType ty‚ÇÅ) $ thStripModuleNamesType ty‚ÇÇ
  TH.AppKindT (ty ‚à∑ TH.Type) (kind ‚à∑ TH.Kind) ‚Üí TH.AppKindT (thStripModuleNamesType ty) $ thStripModuleNamesType kind
  TH.SigT (ty ‚à∑ TH.Type) (kind ‚à∑ TH.Kind) ‚Üí TH.SigT (thStripModuleNamesType ty) $ thStripModuleNamesType kind
  TH.VarT (name ‚à∑ TH.Name) ‚Üí TH.VarT $ thStripModuleNamesName name
  TH.ConT (name ‚à∑ TH.Name) ‚Üí TH.ConT $ thStripModuleNamesName name
  TH.PromotedT (name ‚à∑ TH.Name) ‚Üí TH.PromotedT $ thStripModuleNamesName name
  TH.InfixT (ty‚ÇÅ ‚à∑ TH.Type) (name ‚à∑ TH.Name) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí 
    TH.InfixT (thStripModuleNamesType ty‚ÇÅ) (thStripModuleNamesName name) $ thStripModuleNamesType ty‚ÇÇ
  TH.UInfixT (ty‚ÇÅ ‚à∑ TH.Type) (name ‚à∑ TH.Name) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí 
    TH.UInfixT (thStripModuleNamesType ty‚ÇÅ) (thStripModuleNamesName name) $ thStripModuleNamesType ty‚ÇÇ
  TH.PromotedInfixT (ty‚ÇÅ ‚à∑ TH.Type) (name ‚à∑ TH.Name) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí
    TH.PromotedInfixT (thStripModuleNamesType ty‚ÇÅ) (thStripModuleNamesName name) $ thStripModuleNamesType ty‚ÇÇ
  TH.PromotedUInfixT (ty‚ÇÅ ‚à∑ TH.Type) (name ‚à∑ TH.Name) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí
    TH.PromotedUInfixT (thStripModuleNamesType ty‚ÇÅ) (thStripModuleNamesName name) $ thStripModuleNamesType ty‚ÇÇ
  TH.ParensT (ty ‚à∑ TH.Type) ‚Üí TH.ParensT $ thStripModuleNamesType ty
  TH.TupleT (i ‚à∑ HS.Int) ‚Üí TH.TupleT i
  TH.UnboxedTupleT (i ‚à∑ HS.Int) ‚Üí TH.UnboxedTupleT i
  TH.UnboxedSumT (i ‚à∑ HS.Int) ‚Üí TH.UnboxedSumT i
  TH.ArrowT ‚Üí TH.ArrowT
  TH.MulArrowT ‚Üí TH.MulArrowT
  TH.EqualityT ‚Üí TH.EqualityT
  TH.ListT ‚Üí TH.ListT
  TH.PromotedTupleT (i ‚à∑ HS.Int) ‚Üí TH.PromotedTupleT i
  TH.PromotedNilT ‚Üí TH.PromotedNilT
  TH.PromotedConsT ‚Üí TH.PromotedConsT
  TH.StarT ‚Üí TH.StarT
  TH.ConstraintT ‚Üí TH.ConstraintT
  TH.LitT (l ‚à∑ TH.TyLit) ‚Üí TH.LitT l
  TH.WildCardT ‚Üí TH.WildCardT
  TH.ImplicitParamT (s ‚à∑ HS.String) (ty ‚à∑ TH.Type) ‚Üí TH.ImplicitParamT s $ thStripModuleNamesType ty

thStripModuleNamesPat ‚à∑ TH.Pat ‚Üí TH.Pat
thStripModuleNamesPat = \case
  TH.LitP (lit ‚à∑ TH.Lit) ‚Üí TH.LitP lit
  TH.VarP (name ‚à∑ TH.Name) ‚Üí TH.VarP $ thStripModuleNamesName name
  TH.TupP (patList ‚à∑ [TH.Pat]) ‚Üí TH.TupP $ map thStripModuleNamesPat patList
  TH.UnboxedTupP (patList ‚à∑ [TH.Pat]) ‚Üí TH.UnboxedTupP $ map thStripModuleNamesPat patList
  TH.UnboxedSumP (pat ‚à∑ TH.Pat) (sumAlt ‚à∑ TH.SumAlt) (sumArity ‚à∑ TH.SumArity) ‚Üí
    TH.UnboxedSumP (thStripModuleNamesPat pat) sumAlt sumArity
  TH.ConP (name ‚à∑ TH.Name) (tyList ‚à∑ [TH.Type]) (patList ‚à∑ [TH.Pat]) ‚Üí
    TH.ConP (thStripModuleNamesName name) (map thStripModuleNamesType tyList) $ map thStripModuleNamesPat patList
  TH.InfixP (pat‚ÇÅ ‚à∑ TH.Pat) (name ‚à∑ TH.Name) (pat‚ÇÇ ‚à∑ TH.Pat) ‚Üí
    TH.InfixP (thStripModuleNamesPat pat‚ÇÅ) (thStripModuleNamesName name) $ thStripModuleNamesPat pat‚ÇÇ
  TH.UInfixP (pat‚ÇÅ ‚à∑ TH.Pat) (name ‚à∑ TH.Name) (pat‚ÇÇ ‚à∑ TH.Pat) ‚Üí
    TH.UInfixP (thStripModuleNamesPat pat‚ÇÅ) (thStripModuleNamesName name) $ thStripModuleNamesPat pat‚ÇÇ
  TH.ParensP (pat ‚à∑ TH.Pat) ‚Üí TH.ParensP $ thStripModuleNamesPat pat
  TH.TildeP (pat ‚à∑ TH.Pat) ‚Üí TH.TildeP $ thStripModuleNamesPat pat
  TH.BangP (pat ‚à∑ TH.Pat) ‚Üí TH.BangP $ thStripModuleNamesPat pat
  TH.AsP (name ‚à∑ TH.Name) (pat ‚à∑ TH.Pat) ‚Üí TH.AsP (thStripModuleNamesName name) $ thStripModuleNamesPat pat
  TH.WildP ‚Üí TH.WildP
  TH.RecP (name ‚à∑ TH.Name) (fieldPatList ‚à∑ [TH.FieldPat]) ‚Üí 
    TH.RecP (thStripModuleNamesName name) $ mapOn fieldPatList $ \ (name·µ¢ ‚à∑ TH.Name,pat ‚à∑ TH.Pat) ‚Üí 
      (thStripModuleNamesName name·µ¢,thStripModuleNamesPat pat)
  TH.ListP (patList ‚à∑ [TH.Pat]) ‚Üí TH.ListP $ map thStripModuleNamesPat patList
  TH.SigP (pat ‚à∑ TH.Pat) (ty ‚à∑ TH.Type) ‚Üí TH.SigP (thStripModuleNamesPat pat) $ thStripModuleNamesType ty
  TH.ViewP (exp ‚à∑ TH.Exp) (pat ‚à∑ TH.Pat) ‚Üí TH.ViewP (thStripModuleNamesExp exp) $ thStripModuleNamesPat pat

thStripModuleNamesStmt ‚à∑ TH.Stmt ‚Üí TH.Stmt
thStripModuleNamesStmt = \case
  TH.BindS (pat ‚à∑ TH.Pat) (exp ‚à∑ TH.Exp) ‚Üí TH.BindS (thStripModuleNamesPat pat) $ thStripModuleNamesExp exp
  TH.LetS (decList ‚à∑ [TH.Dec]) ‚Üí TH.LetS $ map thStripModuleNamesDec decList
  TH.NoBindS (exp ‚à∑ TH.Exp) ‚Üí TH.NoBindS $ thStripModuleNamesExp exp
  TH.ParS (stmtListList ‚à∑ [[TH.Stmt]]) ‚Üí TH.ParS $ mapp thStripModuleNamesStmt stmtListList
  TH.RecS (stmtList ‚à∑ [TH.Stmt]) ‚Üí TH.RecS $ map thStripModuleNamesStmt stmtList

thStripModuleNamesGuard ‚à∑ TH.Guard ‚Üí TH.Guard
thStripModuleNamesGuard = \case
  TH.NormalG (exp ‚à∑ TH.Exp) ‚Üí TH.NormalG $ thStripModuleNamesExp exp
  TH.PatG (stmtList ‚à∑ [TH.Stmt]) ‚Üí TH.PatG $ map thStripModuleNamesStmt stmtList

thStripModuleNamesBody ‚à∑ TH.Body ‚Üí TH.Body
thStripModuleNamesBody = \case
  TH.GuardedB (guardExpList ‚à∑ [(TH.Guard,TH.Exp)]) ‚Üí
    TH.GuardedB $ mapOn guardExpList $ \ (guard_ ‚à∑ TH.Guard,exp ‚à∑ TH.Exp) ‚Üí 
      (thStripModuleNamesGuard guard_,thStripModuleNamesExp exp)
  TH.NormalB (exp ‚à∑ TH.Exp) ‚Üí TH.NormalB $ thStripModuleNamesExp exp

thStripModuleNamesClause ‚à∑ TH.Clause ‚Üí TH.Clause
thStripModuleNamesClause = \case
  TH.Clause (patList ‚à∑ [TH.Pat]) (body ‚à∑ TH.Body) (decList ‚à∑ [TH.Dec]) ‚Üí
    TH.Clause (map thStripModuleNamesPat patList) (thStripModuleNamesBody body) $ map thStripModuleNamesDec decList

thStripModuleNamesMatch ‚à∑ TH.Match ‚Üí TH.Match
thStripModuleNamesMatch = \case
  TH.Match (pat ‚à∑ TH.Pat) (body ‚à∑ TH.Body) (decList ‚à∑ [TH.Dec]) ‚Üí
    TH.Match (thStripModuleNamesPat pat) (thStripModuleNamesBody body) $ map thStripModuleNamesDec decList

thStripModuleNamesRange ‚à∑ TH.Range ‚Üí TH.Range
thStripModuleNamesRange = \case
  TH.FromR (exp ‚à∑ TH.Exp) ‚Üí TH.FromR $ thStripModuleNamesExp exp
  TH.FromThenR (exp‚ÇÅ ‚à∑ TH.Exp) (exp‚ÇÇ ‚à∑ TH.Exp) ‚Üí TH.FromThenR (thStripModuleNamesExp exp‚ÇÅ) $ thStripModuleNamesExp exp‚ÇÇ
  TH.FromToR (exp‚ÇÅ ‚à∑ TH.Exp) (exp‚ÇÇ ‚à∑ TH.Exp) ‚Üí TH.FromToR (thStripModuleNamesExp exp‚ÇÅ) $ thStripModuleNamesExp exp‚ÇÇ
  TH.FromThenToR (exp‚ÇÅ ‚à∑ TH.Exp) (exp‚ÇÇ ‚à∑ TH.Exp) (exp‚ÇÉ ‚à∑ TH.Exp) ‚Üí 
    TH.FromThenToR (thStripModuleNamesExp exp‚ÇÅ) (thStripModuleNamesExp exp‚ÇÇ) $ thStripModuleNamesExp exp‚ÇÉ

thStripModuleNamesExp ‚à∑ TH.Exp ‚Üí TH.Exp
thStripModuleNamesExp = \case
  TH.VarE (name ‚à∑ TH.Name) ‚Üí TH.VarE $ thStripModuleNamesName name
  TH.ConE (name ‚à∑ TH.Name) ‚Üí TH.ConE $ thStripModuleNamesName name
  TH.LitE (lit ‚à∑ TH.Lit) ‚Üí TH.LitE lit
  TH.AppE (exp‚ÇÅ ‚à∑ TH.Exp) (exp‚ÇÇ ‚à∑ TH.Exp) ‚Üí TH.AppE (thStripModuleNamesExp exp‚ÇÅ) $ thStripModuleNamesExp exp‚ÇÇ
  TH.AppTypeE (exp ‚à∑ TH.Exp) (ty ‚à∑ TH.Type) ‚Üí TH.AppTypeE (thStripModuleNamesExp exp) $ thStripModuleNamesType ty
  TH.InfixE (expMaybe‚ÇÅ ‚à∑ Maybe TH.Exp) (exp ‚à∑ TH.Exp) (expMaybe‚ÇÇ ‚à∑ Maybe TH.Exp) ‚Üí
    TH.InfixE (HS.fmap thStripModuleNamesExp expMaybe‚ÇÅ) (thStripModuleNamesExp exp) $ HS.fmap thStripModuleNamesExp expMaybe‚ÇÇ
  TH.UInfixE (exp‚ÇÅ ‚à∑ TH.Exp) (exp‚ÇÇ ‚à∑ TH.Exp) (exp‚ÇÉ ‚à∑ TH.Exp) ‚Üí
    TH.UInfixE (thStripModuleNamesExp exp‚ÇÅ) (thStripModuleNamesExp exp‚ÇÇ) $ thStripModuleNamesExp exp‚ÇÉ
  TH.ParensE (exp ‚à∑ TH.Exp) ‚Üí TH.ParensE $ thStripModuleNamesExp exp
  TH.LamE (patList ‚à∑ [TH.Pat]) (exp ‚à∑ TH.Exp) ‚Üí TH.LamE (map thStripModuleNamesPat patList) $ thStripModuleNamesExp exp
  TH.LamCaseE (matchList ‚à∑ [TH.Match]) ‚Üí TH.LamCaseE $ map thStripModuleNamesMatch matchList
  TH.LamCasesE (clauseList ‚à∑ [TH.Clause]) ‚Üí TH.LamCasesE $ map thStripModuleNamesClause clauseList
  TH.TupE (expMaybeList ‚à∑ [Maybe TH.Exp]) ‚Üí TH.TupE $ map (HS.fmap thStripModuleNamesExp) expMaybeList
  TH.UnboxedTupE (expMaybeList ‚à∑ [Maybe TH.Exp]) ‚Üí TH.UnboxedTupE $ map (HS.fmap thStripModuleNamesExp) expMaybeList
  TH.UnboxedSumE (exp ‚à∑ TH.Exp) (sumAlt ‚à∑ TH.SumAlt) (sumArity ‚à∑ TH.SumArity) ‚Üí 
    TH.UnboxedSumE (thStripModuleNamesExp exp) sumAlt sumArity
  TH.CondE (exp‚ÇÅ ‚à∑ TH.Exp) (exp‚ÇÇ ‚à∑ TH.Exp) (exp‚ÇÉ ‚à∑ TH.Exp) ‚Üí
    TH.CondE (thStripModuleNamesExp exp‚ÇÅ) (thStripModuleNamesExp exp‚ÇÇ) $ thStripModuleNamesExp exp‚ÇÉ
  TH.MultiIfE (guardExpList ‚à∑ [(TH.Guard,TH.Exp)]) ‚Üí
    TH.MultiIfE $ mapOn guardExpList $ \ (grd ‚à∑ TH.Guard,exp ‚à∑ TH.Exp) ‚Üí (thStripModuleNamesGuard grd,thStripModuleNamesExp exp)
  TH.LetE (decList ‚à∑ [TH.Dec]) (exp ‚à∑ TH.Exp) ‚Üí TH.LetE (map thStripModuleNamesDec decList) $ thStripModuleNamesExp exp
  TH.CaseE (exp ‚à∑ TH.Exp) (matchList ‚à∑ [TH.Match]) ‚Üí TH.CaseE (thStripModuleNamesExp exp) $ map thStripModuleNamesMatch matchList
  TH.DoE (modNameMaybe ‚à∑ Maybe TH.ModName) (stmtList ‚à∑ [TH.Stmt]) ‚Üí TH.DoE modNameMaybe $ map thStripModuleNamesStmt stmtList
  TH.MDoE (modNameMaybe ‚à∑ Maybe TH.ModName) (stmtList ‚à∑ [TH.Stmt]) ‚Üí TH.MDoE modNameMaybe $ map thStripModuleNamesStmt stmtList
  TH.CompE (stmtList ‚à∑ [TH.Stmt]) ‚Üí TH.CompE $ map thStripModuleNamesStmt stmtList
  TH.ArithSeqE (range_ ‚à∑ TH.Range) ‚Üí TH.ArithSeqE $ thStripModuleNamesRange range_
  TH.ListE (expList ‚à∑ [TH.Exp]) ‚Üí TH.ListE $ map thStripModuleNamesExp expList
  TH.SigE (exp ‚à∑ TH.Exp) (ty ‚à∑ TH.Type) ‚Üí TH.SigE (thStripModuleNamesExp exp) $ thStripModuleNamesType ty
  TH.RecConE (name ‚à∑ TH.Name) (fieldExpList ‚à∑ [TH.FieldExp]) ‚Üí
    TH.RecConE (thStripModuleNamesName name) $ mapOn fieldExpList $ \ (name·µ¢ ‚à∑ TH.Name,exp ‚à∑ TH.Exp) ‚Üí 
      (thStripModuleNamesName name·µ¢,thStripModuleNamesExp exp)
  TH.RecUpdE (exp ‚à∑ TH.Exp) (fieldExpList ‚à∑ [TH.FieldExp]) ‚Üí
    TH.RecUpdE (thStripModuleNamesExp exp) $ mapOn fieldExpList $ \ (name·µ¢ ‚à∑ TH.Name,exp·µ¢ ‚à∑ TH.Exp) ‚Üí 
      (thStripModuleNamesName name·µ¢,thStripModuleNamesExp exp·µ¢)
  TH.StaticE (exp ‚à∑ TH.Exp) ‚Üí TH.StaticE $ thStripModuleNamesExp exp
  TH.UnboundVarE (name ‚à∑ TH.Name) ‚Üí TH.UnboundVarE $ thStripModuleNamesName name
  TH.LabelE (charList ‚à∑ [‚ÑÇ]) ‚Üí TH.LabelE charList
  TH.ImplicitParamVarE (charList ‚à∑ [‚ÑÇ]) ‚Üí TH.ImplicitParamVarE charList
  TH.GetFieldE (exp ‚à∑ TH.Exp) (charList ‚à∑ [‚ÑÇ]) ‚Üí TH.GetFieldE (thStripModuleNamesExp exp) charList
  TH.ProjectionE (stringNonEmpty ‚à∑ HS.NonEmpty [‚ÑÇ]) ‚Üí TH.ProjectionE stringNonEmpty
  TH.TypedBracketE (exp ‚à∑ TH.Exp) ‚Üí TH.TypedBracketE $ thStripModuleNamesExp exp
  TH.TypedSpliceE (exp ‚à∑ TH.Exp) ‚Üí TH.TypedSpliceE $ thStripModuleNamesExp exp

thStripModuleNamesCon ‚à∑ TH.Con ‚Üí TH.Con
thStripModuleNamesCon = \case
  TH.NormalC (name ‚à∑ TH.Name) (bangTypeList ‚à∑ [TH.BangType]) ‚Üí 
    TH.NormalC (thStripModuleNamesName name) $ mapOn bangTypeList $ \ (bang ‚à∑ TH.Bang,ty ‚à∑ TH.Type) ‚Üí 
      (bang,thStripModuleNamesType ty)
  TH.RecC (name ‚à∑ TH.Name) (varBangTypeList ‚à∑ [TH.VarBangType]) ‚Üí
    TH.RecC (thStripModuleNamesName name) $ mapOn varBangTypeList $ \ (name·µ¢ ‚à∑ TH.Name,bang ‚à∑ TH.Bang,ty ‚à∑ TH.Type) ‚Üí
      (thStripModuleNamesName name·µ¢,bang,thStripModuleNamesType ty)
  TH.InfixC (bang‚ÇÅ ‚à∑ TH.Bang,ty‚ÇÅ ‚à∑ TH.Type) (name ‚à∑ TH.Name) (bang‚ÇÇ ‚à∑ TH.Bang,ty‚ÇÇ ‚à∑ TH.Type) ‚Üí 
    TH.InfixC (bang‚ÇÅ,thStripModuleNamesType ty‚ÇÅ) (thStripModuleNamesName name) (bang‚ÇÇ,thStripModuleNamesType ty‚ÇÇ)
  TH.ForallC (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.Specificity]) (cxt ‚à∑ TH.Cxt) (con ‚à∑ TH.Con) ‚Üí
    TH.ForallC (map thStripModuleNamesTyVarBndr tyVarBndrList) (map thStripModuleNamesType cxt) $ thStripModuleNamesCon con
  TH.GadtC (nameList ‚à∑ [TH.Name]) (bangTypeList ‚à∑ [TH.BangType]) (ty ‚à∑ TH.Type) ‚Üí
    let bangTypeList' = mapOn bangTypeList $ \ (bang ‚à∑ TH.Bang,ty·µ¢ ‚à∑ TH.Type) ‚Üí (bang,thStripModuleNamesType ty·µ¢) in
    TH.GadtC (map thStripModuleNamesName nameList) bangTypeList' $ thStripModuleNamesType ty
  TH.RecGadtC (nameList ‚à∑ [TH.Name]) (varBangTypeList ‚à∑ [TH.VarBangType]) (ty ‚à∑ TH.Type) ‚Üí
    let varBangTypeList' = mapOn varBangTypeList $ \ (name ‚à∑ TH.Name,bang ‚à∑ TH.Bang,ty·µ¢ ‚à∑ TH.Type) ‚Üí 
          (thStripModuleNamesName name,bang,thStripModuleNamesType ty·µ¢) 
    in
    TH.RecGadtC (map thStripModuleNamesName nameList) varBangTypeList' $ thStripModuleNamesType ty

thStripModuleNamesDerivClause ‚à∑ TH.DerivClause ‚Üí TH.DerivClause
thStripModuleNamesDerivClause = \case
  TH.DerivClause (derivStrategyMaybe ‚à∑ Maybe TH.DerivStrategy) (cxt ‚à∑ TH.Cxt) ‚Üí
    TH.DerivClause derivStrategyMaybe $ map thStripModuleNamesType cxt

thStripModuleNamesFunDep ‚à∑ TH.FunDep ‚Üí TH.FunDep
thStripModuleNamesFunDep = \case
  TH.FunDep (names‚ÇÅ ‚à∑ [TH.Name]) (names‚ÇÇ ‚à∑ [TH.Name]) ‚Üí
    TH.FunDep (map thStripModuleNamesName names‚ÇÅ) $ map thStripModuleNamesName names‚ÇÇ

thStripModuleNamesForeign ‚à∑ TH.Foreign ‚Üí TH.Foreign
thStripModuleNamesForeign = \case
  TH.ImportF (callconv ‚à∑ TH.Callconv) (safety ‚à∑ TH.Safety) (charList ‚à∑ [‚ÑÇ]) (name ‚à∑ TH.Name) (ty ‚à∑ TH.Type) ‚Üí
    TH.ImportF callconv safety charList (thStripModuleNamesName name) $ thStripModuleNamesType ty
  TH.ExportF (callconv ‚à∑ TH.Callconv) (charList ‚à∑ [‚ÑÇ]) (name ‚à∑ TH.Name) (ty ‚à∑ TH.Type) ‚Üí
    TH.ExportF callconv charList (thStripModuleNamesName name) $ thStripModuleNamesType ty

thStripModuleNamesRuleBndr ‚à∑ TH.RuleBndr ‚Üí TH.RuleBndr
thStripModuleNamesRuleBndr = \case
  TH.RuleVar (name ‚à∑ TH.Name) ‚Üí TH.RuleVar $ thStripModuleNamesName name
  TH.TypedRuleVar (name ‚à∑ TH.Name) (ty ‚à∑ TH.Type) ‚Üí TH.TypedRuleVar (thStripModuleNamesName name) $ thStripModuleNamesType ty

thStripModuleNamesAnnTarget ‚à∑ TH.AnnTarget ‚Üí TH.AnnTarget
thStripModuleNamesAnnTarget = \case
  TH.ModuleAnnotation ‚Üí TH.ModuleAnnotation
  TH.TypeAnnotation (name ‚à∑ TH.Name) ‚Üí TH.TypeAnnotation $ thStripModuleNamesName name
  TH.ValueAnnotation (name ‚à∑ TH.Name) ‚Üí TH.ValueAnnotation $ thStripModuleNamesName name

thStripModuleNamesPragma ‚à∑ TH.Pragma ‚Üí TH.Pragma
thStripModuleNamesPragma = \case
  TH.InlineP (name ‚à∑ TH.Name) (inline ‚à∑ TH.Inline) (ruleMatch ‚à∑ TH.RuleMatch) (phases ‚à∑ TH.Phases) ‚Üí
    TH.InlineP (thStripModuleNamesName name) inline ruleMatch phases
  TH.OpaqueP (name ‚à∑ TH.Name) ‚Üí TH.OpaqueP $ thStripModuleNamesName name
  TH.SpecialiseP (name ‚à∑ TH.Name) (ty ‚à∑ TH.Type) (inlineMaybe ‚à∑ Maybe TH.Inline) (phases ‚à∑ TH.Phases) ‚Üí
    TH.SpecialiseP (thStripModuleNamesName name) (thStripModuleNamesType ty) inlineMaybe phases
  TH.SpecialiseInstP (ty ‚à∑ TH.Type) ‚Üí TH.SpecialiseInstP $ thStripModuleNamesType ty
  TH.RuleP 
    (charList ‚à∑ [‚ÑÇ]) (tyVarBndrListMaybe ‚à∑ Maybe [TH.TyVarBndr ()]) (ruleBndrList ‚à∑ [TH.RuleBndr]) 
    (exp‚ÇÅ ‚à∑ TH.Exp) (exp‚ÇÇ ‚à∑ TH.Exp) (phases ‚à∑ TH.Phases) ‚Üí
      TH.RuleP 
        charList (HS.fmap (map thStripModuleNamesTyVarBndr) tyVarBndrListMaybe) (map thStripModuleNamesRuleBndr ruleBndrList) 
        (thStripModuleNamesExp exp‚ÇÅ) (thStripModuleNamesExp exp‚ÇÇ) phases
  TH.AnnP (annTarget ‚à∑ TH.AnnTarget) (exp ‚à∑ TH.Exp) ‚Üí TH.AnnP (thStripModuleNamesAnnTarget annTarget) $ thStripModuleNamesExp exp
  TH.LineP (i ‚à∑ HS.Int) (charList ‚à∑ [‚ÑÇ]) ‚Üí TH.LineP i charList
  TH.CompleteP (nameList ‚à∑ [TH.Name]) (nameMaybe ‚à∑ Maybe TH.Name) ‚Üí
    TH.CompleteP (map thStripModuleNamesName nameList) $ HS.fmap thStripModuleNamesName  nameMaybe

thStripModuleNamesTySynEqn ‚à∑ TH.TySynEqn ‚Üí TH.TySynEqn
thStripModuleNamesTySynEqn = \case
  TH.TySynEqn (tyVarBndrListMaybe ‚à∑ Maybe [TH.TyVarBndr ()]) (ty‚ÇÅ ‚à∑ TH.Type) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí
    TH.TySynEqn (HS.fmap (map thStripModuleNamesTyVarBndr) tyVarBndrListMaybe) (thStripModuleNamesType ty‚ÇÅ) $ thStripModuleNamesType ty‚ÇÇ

thStripModuleNamesFamilyResultSig ‚à∑ TH.FamilyResultSig ‚Üí TH.FamilyResultSig
thStripModuleNamesFamilyResultSig = \case
  TH.NoSig ‚Üí
    TH.NoSig
  TH.KindSig (kind ‚à∑ TH.Kind) ‚Üí
    TH.KindSig $ thStripModuleNamesType kind
  TH.TyVarSig (tyVarBndr ‚à∑ TH.TyVarBndr ()) ‚Üí
    TH.TyVarSig $ thStripModuleNamesTyVarBndr tyVarBndr

thStripModuleNamesInjectivityAnn ‚à∑ TH.InjectivityAnn ‚Üí TH.InjectivityAnn
thStripModuleNamesInjectivityAnn = \case
  TH.InjectivityAnn (name ‚à∑ TH.Name) (nameList ‚à∑ [TH.Name]) ‚Üí
    TH.InjectivityAnn (thStripModuleNamesName name) $ map thStripModuleNamesName nameList

thStripModuleNamesTypeFamilyHead ‚à∑ TH.TypeFamilyHead ‚Üí TH.TypeFamilyHead
thStripModuleNamesTypeFamilyHead = \case
  TH.TypeFamilyHead 
    (name ‚à∑ TH.Name) 
    (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.BndrVis]) 
    (familyResultSig ‚à∑ TH.FamilyResultSig)
    (injectivityAnnMaybe ‚à∑ Maybe TH.InjectivityAnn) ‚Üí
      TH.TypeFamilyHead 
        (thStripModuleNamesName name) 
        (map thStripModuleNamesTyVarBndr tyVarBndrList)
        (thStripModuleNamesFamilyResultSig familyResultSig) $
        HS.fmap thStripModuleNamesInjectivityAnn injectivityAnnMaybe

thStripModuleNamesDerivStrategy ‚à∑ TH.DerivStrategy ‚Üí TH.DerivStrategy
thStripModuleNamesDerivStrategy = \case
  TH.StockStrategy ‚Üí TH.StockStrategy
  TH.AnyclassStrategy ‚Üí TH.AnyclassStrategy
  TH.NewtypeStrategy ‚Üí TH.NewtypeStrategy
  TH.ViaStrategy (ty ‚à∑ TH.Type) ‚Üí TH.ViaStrategy $ thStripModuleNamesType ty

thStripModuleNamesPatSynArgs ‚à∑ TH.PatSynArgs ‚Üí TH.PatSynArgs
thStripModuleNamesPatSynArgs = \case
  TH.PrefixPatSyn (nameList ‚à∑ [TH.Name]) ‚Üí
    TH.PrefixPatSyn $ map thStripModuleNamesName nameList
  TH.InfixPatSyn (name‚ÇÅ ‚à∑ TH.Name) (name‚ÇÇ ‚à∑ TH.Name) ‚Üí
    TH.InfixPatSyn (thStripModuleNamesName name‚ÇÅ) $ thStripModuleNamesName name‚ÇÇ
  TH.RecordPatSyn (nameList ‚à∑ [TH.Name]) ‚Üí
    TH.RecordPatSyn $ map thStripModuleNamesName nameList

thStripModuleNamesPatSynDir ‚à∑ TH.PatSynDir ‚Üí TH.PatSynDir
thStripModuleNamesPatSynDir = \case
  TH.Unidir ‚Üí
    TH.Unidir
  TH.ImplBidir ‚Üí
    TH.ImplBidir
  TH.ExplBidir (clauseList ‚à∑ [TH.Clause]) ‚Üí
    TH.ExplBidir $ map thStripModuleNamesClause clauseList

thStripModuleNamesDec ‚à∑ TH.Dec ‚Üí TH.Dec
thStripModuleNamesDec = \case
  TH.FunD (name ‚à∑ TH.Name) (clauseList ‚à∑ [TH.Clause]) ‚Üí 
    TH.FunD (thStripModuleNamesName name) $ map thStripModuleNamesClause clauseList
  TH.ValD (pat ‚à∑ TH.Pat) (body ‚à∑ TH.Body) (decList ‚à∑ [TH.Dec]) ‚Üí
    TH.ValD (thStripModuleNamesPat pat) (thStripModuleNamesBody body) $ map thStripModuleNamesDec decList
  TH.DataD 
    (cxt ‚à∑ TH.Cxt) (name ‚à∑ TH.Name) (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.BndrVis]) 
    (kindMaybe ‚à∑ Maybe TH.Kind) (conList ‚à∑ [TH.Con]) (derivClauseList ‚à∑ [TH.DerivClause]) ‚Üí
      TH.DataD 
        (map thStripModuleNamesType cxt) (thStripModuleNamesName name) (map thStripModuleNamesTyVarBndr tyVarBndrList) 
        (HS.fmap thStripModuleNamesType kindMaybe) (map thStripModuleNamesCon conList) $ map thStripModuleNamesDerivClause derivClauseList
  TH.NewtypeD
    (cxt ‚à∑ TH.Cxt) (name ‚à∑ TH.Name) (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.BndrVis]) 
    (kindMaybe ‚à∑ Maybe TH.Kind) (con ‚à∑ TH.Con) (derivClauseList ‚à∑ [TH.DerivClause]) ‚Üí
      TH.NewtypeD 
        (map thStripModuleNamesType cxt) (thStripModuleNamesName name) (map thStripModuleNamesTyVarBndr tyVarBndrList) 
        (HS.fmap thStripModuleNamesType kindMaybe) (thStripModuleNamesCon con) $ map thStripModuleNamesDerivClause derivClauseList
  TH.TypeDataD (name ‚à∑ TH.Name) (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.BndrVis]) (kindMaybe ‚à∑ Maybe TH.Kind) (conList ‚à∑ [TH.Con]) ‚Üí
    TH.TypeDataD 
      (thStripModuleNamesName name) (map thStripModuleNamesTyVarBndr tyVarBndrList) 
      (HS.fmap thStripModuleNamesType kindMaybe) $ map thStripModuleNamesCon conList
  TH.TySynD (name ‚à∑ TH.Name) (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.BndrVis]) (ty ‚à∑ TH.Type) ‚Üí
      TH.TySynD (thStripModuleNamesName name) (map thStripModuleNamesTyVarBndr tyVarBndrList) $ thStripModuleNamesType ty
  TH.ClassD (cxt ‚à∑ TH.Cxt) (name ‚à∑ TH.Name) (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.BndrVis]) (funDepList ‚à∑ [TH.FunDep]) (decList ‚à∑ [TH.Dec]) ‚Üí
    TH.ClassD 
      (map thStripModuleNamesType cxt) (thStripModuleNamesName name) (map thStripModuleNamesTyVarBndr tyVarBndrList) 
      (map thStripModuleNamesFunDep funDepList) $ map thStripModuleNamesDec decList
  TH.InstanceD (overlapMaybe ‚à∑ Maybe TH.Overlap) (cxt ‚à∑ TH.Cxt) (ty ‚à∑ TH.Type) (decList ‚à∑ [TH.Dec]) ‚Üí
    TH.InstanceD overlapMaybe (map thStripModuleNamesType cxt) (thStripModuleNamesType ty) $ map thStripModuleNamesDec decList
  TH.SigD (name ‚à∑ TH.Name) (ty ‚à∑ TH.Type) ‚Üí TH.SigD (thStripModuleNamesName name) $ thStripModuleNamesType ty
  TH.KiSigD (name ‚à∑ TH.Name) (kind ‚à∑ TH.Kind) ‚Üí TH.KiSigD (thStripModuleNamesName name) $ thStripModuleNamesType kind
  TH.ForeignD (foreign_ ‚à∑ TH.Foreign) ‚Üí TH.ForeignD $ thStripModuleNamesForeign foreign_
  TH.InfixD (fixity ‚à∑ TH.Fixity) (name ‚à∑ TH.Name) ‚Üí TH.InfixD fixity $ thStripModuleNamesName name
  TH.DefaultD (tyList ‚à∑ [TH.Type]) ‚Üí TH.DefaultD $ map thStripModuleNamesType tyList
  TH.PragmaD (pragma ‚à∑ TH.Pragma) ‚Üí TH.PragmaD $ thStripModuleNamesPragma pragma
  TH.DataFamilyD (name ‚à∑ TH.Name) (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.BndrVis]) (kindMaybe ‚à∑ Maybe TH.Kind) ‚Üí
      TH.DataFamilyD (thStripModuleNamesName name) (map thStripModuleNamesTyVarBndr tyVarBndrList) $ HS.fmap thStripModuleNamesType kindMaybe
  TH.DataInstD
    (cxt ‚à∑ TH.Cxt) (tyVarBndrListMaybe ‚à∑ Maybe [TH.TyVarBndr ()]) (ty ‚à∑ TH.Type)
    (kindMaybe ‚à∑ Maybe TH.Kind) (conList ‚à∑ [TH.Con]) (derivClauseList ‚à∑ [TH.DerivClause]) ‚Üí
      TH.DataInstD 
        (map thStripModuleNamesType cxt) (HS.fmap (map thStripModuleNamesTyVarBndr) tyVarBndrListMaybe) 
        (thStripModuleNamesType ty) (HS.fmap thStripModuleNamesType kindMaybe)
        (map thStripModuleNamesCon conList) $ map thStripModuleNamesDerivClause derivClauseList
  TH.NewtypeInstD
    (cxt ‚à∑ TH.Cxt) (tyVarBndrListMaybe ‚à∑ Maybe [TH.TyVarBndr ()]) (ty ‚à∑ TH.Type)
    (kindMaybe ‚à∑ Maybe TH.Kind) (con ‚à∑ TH.Con) (derivClauseList ‚à∑ [TH.DerivClause]) ‚Üí
      TH.NewtypeInstD 
        (map thStripModuleNamesType cxt) (HS.fmap (map thStripModuleNamesTyVarBndr) tyVarBndrListMaybe) 
        (thStripModuleNamesType ty) (HS.fmap thStripModuleNamesType kindMaybe) (thStripModuleNamesCon con) $
        map thStripModuleNamesDerivClause derivClauseList
  TH.TySynInstD (tySynEqn ‚à∑ TH.TySynEqn) ‚Üí TH.TySynInstD $ thStripModuleNamesTySynEqn tySynEqn
  TH.OpenTypeFamilyD (typeFamilyHead ‚à∑ TH.TypeFamilyHead) ‚Üí TH.OpenTypeFamilyD $ thStripModuleNamesTypeFamilyHead typeFamilyHead
  TH.ClosedTypeFamilyD (typeFamilyHead ‚à∑ TH.TypeFamilyHead) (tySynEqnList ‚à∑ [TH.TySynEqn]) ‚Üí
      TH.ClosedTypeFamilyD (thStripModuleNamesTypeFamilyHead typeFamilyHead) $ map thStripModuleNamesTySynEqn tySynEqnList
  TH.RoleAnnotD (name ‚à∑ TH.Name) (roleList ‚à∑ [TH.Role]) ‚Üí TH.RoleAnnotD (thStripModuleNamesName name) roleList
  TH.StandaloneDerivD (derivStrategyMaybe ‚à∑ Maybe TH.DerivStrategy) (cxt ‚à∑ TH.Cxt) (ty ‚à∑ TH.Type) ‚Üí
      TH.StandaloneDerivD 
        (HS.fmap thStripModuleNamesDerivStrategy derivStrategyMaybe) (map thStripModuleNamesType cxt) $ thStripModuleNamesType ty
  TH.DefaultSigD (name ‚à∑ TH.Name) (ty ‚à∑ TH.Type) ‚Üí
    TH.DefaultSigD (thStripModuleNamesName name) $ thStripModuleNamesType ty
  TH.PatSynD (name ‚à∑ TH.Name) (patSynArgs ‚à∑ TH.PatSynArgs) (patSynDir ‚à∑ TH.PatSynDir) (pat ‚à∑ TH.Pat) ‚Üí
      TH.PatSynD 
        (thStripModuleNamesName name) (thStripModuleNamesPatSynArgs patSynArgs) 
        (thStripModuleNamesPatSynDir patSynDir) $ thStripModuleNamesPat pat
  TH.PatSynSigD (name ‚à∑ TH.Name) (patSynType ‚à∑ TH.PatSynType) ‚Üí TH.PatSynSigD (thStripModuleNamesName name) $ thStripModuleNamesType patSynType
  TH.ImplicitParamBindD (charList ‚à∑ [‚ÑÇ]) (exp ‚à∑ TH.Exp) ‚Üí TH.ImplicitParamBindD charList $ thStripModuleNamesExp exp

------------------------
-- IDENTITY FUNCTIONS --
------------------------

thIdOccName ‚à∑ TH.OccName ‚Üí TH.OccName
thIdOccName = \case
  TH.OccName (charList ‚à∑ [‚ÑÇ]) ‚Üí
    TH.OccName charList

thIdNameFlavour ‚à∑ TH.NameFlavour ‚Üí TH.NameFlavour
thIdNameFlavour = \case
  TH.NameS ‚Üí 
    TH.NameS
  TH.NameQ (modName ‚à∑ TH.ModName) ‚Üí
    TH.NameQ modName
  TH.NameU (uniq ‚à∑ TH.Uniq) ‚Üí
    TH.NameU uniq
  TH.NameL (uniq ‚à∑ TH.Uniq) ‚Üí
    TH.NameL uniq
  TH.NameG (nameSpace ‚à∑ TH.NameSpace) (pkgName ‚à∑ TH.PkgName) (modName ‚à∑ TH.ModName) ‚Üí
    TH.NameG nameSpace pkgName modName

thIdName ‚à∑ TH.Name ‚Üí TH.Name
thIdName = \case
  TH.Name (occName ‚à∑ TH.OccName) (nameFlavor ‚à∑ TH.NameFlavour) ‚Üí
    TH.Name occName nameFlavor
  
thIdTyVarBndr ‚à∑ ‚àÄ flag. TH.TyVarBndr flag ‚Üí TH.TyVarBndr flag
thIdTyVarBndr = \case
  TH.PlainTV (name ‚à∑ TH.Name) (flag ‚à∑ flag) ‚Üí
    TH.PlainTV name flag
  TH.KindedTV (name ‚à∑ TH.Name) (flag ‚à∑ flag) (kind ‚à∑ TH.Kind) ‚Üí
    TH.KindedTV name flag kind

thIdType ‚à∑ TH.Type ‚Üí TH.Type
thIdType = \case
  TH.ForallT (tyVarBndrs ‚à∑ [TH.TyVarBndr TH.Specificity]) (cxt ‚à∑ TH.Cxt) (ty ‚à∑ TH.Type) ‚Üí 
    TH.ForallT tyVarBndrs cxt ty
  TH.ForallVisT (tyVarBndrs ‚à∑ [TH.TyVarBndr ()]) (ty ‚à∑ TH.Type) ‚Üí 
    TH.ForallVisT tyVarBndrs ty
  TH.AppT (ty‚ÇÅ ‚à∑ TH.Type) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí 
    TH.AppT ty‚ÇÅ ty‚ÇÇ
  TH.AppKindT (ty ‚à∑ TH.Type) (kind ‚à∑ TH.Kind) ‚Üí 
    TH.AppKindT ty kind
  TH.SigT (ty ‚à∑ TH.Type) (kind ‚à∑ TH.Kind) ‚Üí 
    TH.SigT ty kind
  TH.VarT (name ‚à∑ TH.Name) ‚Üí
    TH.VarT name
  TH.ConT (name ‚à∑ TH.Name) ‚Üí
    TH.ConT name
  TH.PromotedT (name ‚à∑ TH.Name) ‚Üí
    TH.PromotedT name
  TH.InfixT (ty‚ÇÅ ‚à∑ TH.Type) (name ‚à∑ TH.Name) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí 
    TH.InfixT ty‚ÇÅ name ty‚ÇÇ
  TH.UInfixT (ty‚ÇÅ ‚à∑ TH.Type) (name ‚à∑ TH.Name) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí 
    TH.UInfixT ty‚ÇÅ name ty‚ÇÇ
  TH.PromotedInfixT (ty‚ÇÅ ‚à∑ TH.Type) (name ‚à∑ TH.Name) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí
    TH.PromotedInfixT ty‚ÇÅ name ty‚ÇÇ
  TH.PromotedUInfixT (ty‚ÇÅ ‚à∑ TH.Type) (name ‚à∑ TH.Name) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí
    TH.PromotedUInfixT ty‚ÇÅ name ty‚ÇÇ
  TH.ParensT (ty ‚à∑ TH.Type) ‚Üí
    TH.ParensT ty
  TH.TupleT (i ‚à∑ HS.Int) ‚Üí 
    TH.TupleT i
  TH.UnboxedTupleT (i ‚à∑ HS.Int) ‚Üí
    TH.UnboxedTupleT i
  TH.UnboxedSumT (i ‚à∑ HS.Int) ‚Üí 
    TH.UnboxedSumT i
  TH.ArrowT ‚Üí 
    TH.ArrowT
  TH.MulArrowT ‚Üí 
    TH.MulArrowT
  TH.EqualityT ‚Üí 
    TH.EqualityT
  TH.ListT ‚Üí 
    TH.ListT
  TH.PromotedTupleT (i ‚à∑ HS.Int) ‚Üí 
    TH.PromotedTupleT i
  TH.PromotedNilT ‚Üí 
    TH.PromotedNilT
  TH.PromotedConsT ‚Üí 
    TH.PromotedConsT
  TH.StarT ‚Üí 
    TH.StarT
  TH.ConstraintT ‚Üí 
    TH.ConstraintT
  TH.LitT (l ‚à∑ TH.TyLit) ‚Üí 
    TH.LitT l
  TH.WildCardT ‚Üí 
    TH.WildCardT
  TH.ImplicitParamT (s ‚à∑ HS.String) (ty ‚à∑ TH.Type) ‚Üí 
    TH.ImplicitParamT s ty

thIdPat ‚à∑ TH.Pat ‚Üí TH.Pat
thIdPat = \case
  TH.LitP (lit ‚à∑ TH.Lit) ‚Üí
    TH.LitP lit
  TH.VarP (name ‚à∑ TH.Name) ‚Üí
    TH.VarP name
  TH.TupP (patList ‚à∑ [TH.Pat]) ‚Üí
    TH.TupP patList
  TH.UnboxedTupP (patList ‚à∑ [TH.Pat]) ‚Üí
    TH.UnboxedTupP patList
  TH.UnboxedSumP (pat ‚à∑ TH.Pat) (sumAlt ‚à∑ TH.SumAlt) (sumArity ‚à∑ TH.SumArity) ‚Üí
    TH.UnboxedSumP pat sumAlt sumArity
  TH.ConP (name ‚à∑ TH.Name) (tyList ‚à∑ [TH.Type]) (patList ‚à∑ [TH.Pat]) ‚Üí
    TH.ConP name tyList patList
  TH.InfixP (pat‚ÇÅ ‚à∑ TH.Pat) (name ‚à∑ TH.Name) (pat‚ÇÇ ‚à∑ TH.Pat) ‚Üí
    TH.InfixP pat‚ÇÅ name pat‚ÇÇ
  TH.UInfixP (pat‚ÇÅ ‚à∑ TH.Pat) (name ‚à∑ TH.Name) (pat‚ÇÇ ‚à∑ TH.Pat) ‚Üí
    TH.UInfixP pat‚ÇÅ name pat‚ÇÇ
  TH.ParensP (pat ‚à∑ TH.Pat) ‚Üí
    TH.ParensP pat
  TH.TildeP (pat ‚à∑ TH.Pat) ‚Üí
    TH.TildeP pat
  TH.BangP (pat ‚à∑ TH.Pat) ‚Üí
    TH.BangP pat
  TH.AsP (name ‚à∑ TH.Name) (pat ‚à∑ TH.Pat) ‚Üí
    TH.AsP name pat
  TH.WildP ‚Üí
    TH.WildP
  TH.RecP (name ‚à∑ TH.Name) (fieldPatList ‚à∑ [TH.FieldPat]) ‚Üí
    TH.RecP name fieldPatList
  TH.ListP (patList ‚à∑ [TH.Pat]) ‚Üí
    TH.ListP patList
  TH.SigP (pat ‚à∑ TH.Pat) (ty ‚à∑ TH.Type) ‚Üí
    TH.SigP pat ty
  TH.ViewP (exp ‚à∑ TH.Exp) (pat ‚à∑ TH.Pat) ‚Üí
    TH.ViewP exp pat

thIdStmt ‚à∑ TH.Stmt ‚Üí TH.Stmt
thIdStmt = \case
  TH.BindS (pat ‚à∑ TH.Pat) (exp ‚à∑ TH.Exp) ‚Üí
    TH.BindS pat exp
  TH.LetS (decList ‚à∑ [TH.Dec]) ‚Üí
    TH.LetS decList
  TH.NoBindS (exp ‚à∑ TH.Exp) ‚Üí
    TH.NoBindS exp
  TH.ParS (stmtListList ‚à∑ [[TH.Stmt]]) ‚Üí
    TH.ParS stmtListList
  TH.RecS (stmtList ‚à∑ [TH.Stmt]) ‚Üí
    TH.RecS stmtList

thIdGuard ‚à∑ TH.Guard ‚Üí TH.Guard
thIdGuard = \case
  TH.NormalG (exp ‚à∑ TH.Exp) ‚Üí 
    TH.NormalG exp
  TH.PatG (stmtList ‚à∑ [TH.Stmt]) ‚Üí
    TH.PatG stmtList

thIdBody ‚à∑ TH.Body ‚Üí TH.Body
thIdBody = \case
  TH.GuardedB (guardExpList ‚à∑ [(TH.Guard,TH.Exp)]) ‚Üí
    TH.GuardedB guardExpList
  TH.NormalB (exp ‚à∑ TH.Exp) ‚Üí
    TH.NormalB exp

thIdClause ‚à∑ TH.Clause ‚Üí TH.Clause
thIdClause = \case
  TH.Clause (patList ‚à∑ [TH.Pat]) (body ‚à∑ TH.Body) (decList ‚à∑ [TH.Dec]) ‚Üí
    TH.Clause patList body decList

thIdMatch ‚à∑ TH.Match ‚Üí TH.Match
thIdMatch = \case
  TH.Match (pat ‚à∑ TH.Pat) (body ‚à∑ TH.Body) (decList ‚à∑ [TH.Dec]) ‚Üí
    TH.Match pat body decList

thIdRange ‚à∑ TH.Range ‚Üí TH.Range
thIdRange = \case
  TH.FromR (exp ‚à∑ TH.Exp) ‚Üí TH.FromR exp
  TH.FromThenR (exp‚ÇÅ ‚à∑ TH.Exp) (exp‚ÇÇ ‚à∑ TH.Exp) ‚Üí TH.FromThenR exp‚ÇÅ exp‚ÇÇ
  TH.FromToR (exp‚ÇÅ ‚à∑ TH.Exp) (exp‚ÇÇ ‚à∑ TH.Exp) ‚Üí TH.FromToR exp‚ÇÅ exp‚ÇÇ
  TH.FromThenToR (exp‚ÇÅ ‚à∑ TH.Exp) (exp‚ÇÇ ‚à∑ TH.Exp) (exp‚ÇÉ ‚à∑ TH.Exp) ‚Üí TH.FromThenToR exp‚ÇÅ exp‚ÇÇ exp‚ÇÉ

thIdExp ‚à∑ TH.Exp ‚Üí TH.Exp
thIdExp = \case
  TH.VarE (name ‚à∑ TH.Name) ‚Üí
    TH.VarE name
  TH.ConE (name ‚à∑ TH.Name) ‚Üí
    TH.ConE name
  TH.LitE (lit ‚à∑ TH.Lit) ‚Üí
    TH.LitE lit
  TH.AppE (exp‚ÇÅ ‚à∑ TH.Exp) (exp‚ÇÇ ‚à∑ TH.Exp) ‚Üí
    TH.AppE exp‚ÇÅ exp‚ÇÇ
  TH.AppTypeE (exp ‚à∑ TH.Exp) (ty ‚à∑ TH.Type) ‚Üí
    TH.AppTypeE exp ty
  TH.InfixE (expMaybe‚ÇÅ ‚à∑ Maybe TH.Exp) (exp ‚à∑ TH.Exp) (expMaybe‚ÇÇ ‚à∑ Maybe TH.Exp) ‚Üí
    TH.InfixE expMaybe‚ÇÅ exp expMaybe‚ÇÇ
  TH.UInfixE (exp‚ÇÅ ‚à∑ TH.Exp) (exp‚ÇÇ ‚à∑ TH.Exp) (exp‚ÇÉ ‚à∑ TH.Exp) ‚Üí
    TH.UInfixE exp‚ÇÅ exp‚ÇÇ exp‚ÇÉ
  TH.ParensE (exp ‚à∑ TH.Exp) ‚Üí
    TH.ParensE exp
  TH.LamE (patList ‚à∑ [TH.Pat]) (exp ‚à∑ TH.Exp) ‚Üí
    TH.LamE patList exp
  TH.LamCaseE (matchList ‚à∑ [TH.Match]) ‚Üí
    TH.LamCaseE matchList
  TH.LamCasesE (clauseList ‚à∑ [TH.Clause]) ‚Üí
    TH.LamCasesE clauseList
  TH.TupE (expMaybeList ‚à∑ [Maybe TH.Exp]) ‚Üí
    TH.TupE expMaybeList
  TH.UnboxedTupE (expMaybeList ‚à∑ [Maybe TH.Exp]) ‚Üí
    TH.UnboxedTupE expMaybeList
  TH.UnboxedSumE (exp ‚à∑ TH.Exp) (sumAlt ‚à∑ TH.SumAlt) (sumArity ‚à∑ TH.SumArity) ‚Üí
    TH.UnboxedSumE exp sumAlt sumArity
  TH.CondE (exp‚ÇÅ ‚à∑ TH.Exp) (exp‚ÇÇ ‚à∑ TH.Exp) (exp‚ÇÉ ‚à∑ TH.Exp) ‚Üí
    TH.CondE exp‚ÇÅ exp‚ÇÇ exp‚ÇÉ
  TH.MultiIfE (guardExpList ‚à∑ [(TH.Guard,TH.Exp)]) ‚Üí
    TH.MultiIfE guardExpList
  TH.LetE (decList ‚à∑ [TH.Dec]) (exp ‚à∑ TH.Exp) ‚Üí
    TH.LetE decList exp
  TH.CaseE (exp ‚à∑ TH.Exp) (matchList ‚à∑ [TH.Match]) ‚Üí
    TH.CaseE exp matchList
  TH.DoE (modNameMaybe ‚à∑ Maybe TH.ModName) (stmtList ‚à∑ [TH.Stmt]) ‚Üí
    TH.DoE modNameMaybe stmtList
  TH.MDoE (modNameMaybe ‚à∑ Maybe TH.ModName) (stmtList ‚à∑ [TH.Stmt]) ‚Üí
    TH.MDoE modNameMaybe stmtList
  TH.CompE (stmtList ‚à∑ [TH.Stmt]) ‚Üí
    TH.CompE stmtList
  TH.ArithSeqE (range_ ‚à∑ TH.Range) ‚Üí
    TH.ArithSeqE range_
  TH.ListE (expList ‚à∑ [TH.Exp]) ‚Üí
    TH.ListE expList
  TH.SigE (exp ‚à∑ TH.Exp) (ty ‚à∑ TH.Type) ‚Üí
    TH.SigE exp ty
  TH.RecConE (name ‚à∑ TH.Name) (fieldExpList ‚à∑ [TH.FieldExp]) ‚Üí
    TH.RecConE name fieldExpList
  TH.RecUpdE (exp ‚à∑ TH.Exp) (fieldExpList ‚à∑ [TH.FieldExp]) ‚Üí
    TH.RecUpdE exp fieldExpList
  TH.StaticE (exp ‚à∑ TH.Exp) ‚Üí
    TH.StaticE exp
  TH.UnboundVarE (name ‚à∑ TH.Name) ‚Üí
    TH.UnboundVarE name
  TH.LabelE (charList ‚à∑ [‚ÑÇ]) ‚Üí
    TH.LabelE charList
  TH.ImplicitParamVarE (charList ‚à∑ [‚ÑÇ]) ‚Üí
    TH.ImplicitParamVarE charList
  TH.GetFieldE (exp ‚à∑ TH.Exp) (charList ‚à∑ [‚ÑÇ]) ‚Üí
    TH.GetFieldE exp charList
  TH.ProjectionE (stringNonEmpty ‚à∑ HS.NonEmpty [‚ÑÇ]) ‚Üí
    TH.ProjectionE stringNonEmpty
  TH.TypedBracketE (exp ‚à∑ TH.Exp) ‚Üí
    TH.TypedBracketE exp
  TH.TypedSpliceE (exp ‚à∑ TH.Exp) ‚Üí
    TH.TypedSpliceE exp

thIdCon ‚à∑ TH.Con ‚Üí TH.Con
thIdCon = \case
  TH.NormalC (name ‚à∑ TH.Name) (bangTypeList ‚à∑ [TH.BangType]) ‚Üí 
    TH.NormalC name bangTypeList
  TH.RecC (name ‚à∑ TH.Name) (varBangTypeList ‚à∑ [TH.VarBangType]) ‚Üí
    TH.RecC name varBangTypeList
  TH.InfixC (bangType‚ÇÅ ‚à∑ TH.BangType) (name ‚à∑ TH.Name) (bangType‚ÇÇ ‚à∑ TH.BangType) ‚Üí 
    TH.InfixC bangType‚ÇÅ name bangType‚ÇÇ
  TH.ForallC (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.Specificity]) (cxt ‚à∑ TH.Cxt) (con ‚à∑ TH.Con) ‚Üí
    TH.ForallC tyVarBndrList cxt con
  TH.GadtC (nameList ‚à∑ [TH.Name]) (bangTypeList ‚à∑ [TH.BangType]) (ty ‚à∑ TH.Type) ‚Üí
    TH.GadtC nameList bangTypeList ty
  TH.RecGadtC (nameList ‚à∑ [TH.Name]) (varBangTypeList ‚à∑ [TH.VarBangType]) (ty ‚à∑ TH.Type) ‚Üí
    TH.RecGadtC nameList varBangTypeList ty

thIdDerivClause ‚à∑ TH.DerivClause ‚Üí TH.DerivClause
thIdDerivClause = \case
  TH.DerivClause (derivStrategyMaybe ‚à∑ Maybe TH.DerivStrategy) (cxt ‚à∑ TH.Cxt) ‚Üí
    TH.DerivClause derivStrategyMaybe cxt

thIdFunDep ‚à∑ TH.FunDep ‚Üí TH.FunDep
thIdFunDep = \case
  TH.FunDep (names‚ÇÅ ‚à∑ [TH.Name]) (names‚ÇÇ ‚à∑ [TH.Name]) ‚Üí
    TH.FunDep names‚ÇÅ names‚ÇÇ

thIdForeign ‚à∑ TH.Foreign ‚Üí TH.Foreign
thIdForeign = \case
  TH.ImportF (callconv ‚à∑ TH.Callconv) (safety ‚à∑ TH.Safety) (charList ‚à∑ [‚ÑÇ]) (name ‚à∑ TH.Name) (ty ‚à∑ TH.Type) ‚Üí
    TH.ImportF callconv safety charList name ty
  TH.ExportF (callconv ‚à∑ TH.Callconv) (charList ‚à∑ [‚ÑÇ]) (name ‚à∑ TH.Name) (ty ‚à∑ TH.Type) ‚Üí
    TH.ExportF callconv charList name ty

thIdRuleBndr ‚à∑ TH.RuleBndr ‚Üí TH.RuleBndr
thIdRuleBndr = \case
  TH.RuleVar (name ‚à∑ TH.Name) ‚Üí
    TH.RuleVar name
  TH.TypedRuleVar (name ‚à∑ TH.Name) (ty ‚à∑ TH.Type) ‚Üí
    TH.TypedRuleVar name ty

thIdAnnTarget ‚à∑ TH.AnnTarget ‚Üí TH.AnnTarget
thIdAnnTarget = \case
  TH.ModuleAnnotation ‚Üí 
    TH.ModuleAnnotation
  TH.TypeAnnotation (name ‚à∑ TH.Name) ‚Üí
   TH.TypeAnnotation name
  TH.ValueAnnotation (name ‚à∑ TH.Name) ‚Üí
   TH.ValueAnnotation name

thIdPragma ‚à∑ TH.Pragma ‚Üí TH.Pragma
thIdPragma = \case
  TH.InlineP (name ‚à∑ TH.Name) (inline ‚à∑ TH.Inline) (ruleMatch ‚à∑ TH.RuleMatch) (phases ‚à∑ TH.Phases) ‚Üí
    TH.InlineP name inline ruleMatch phases
  TH.OpaqueP (name ‚à∑ TH.Name) ‚Üí
    TH.OpaqueP name
  TH.SpecialiseP (name ‚à∑ TH.Name) (ty ‚à∑ TH.Type) (inlineMaybe ‚à∑ Maybe TH.Inline) (phases ‚à∑ TH.Phases) ‚Üí
    TH.SpecialiseP name ty inlineMaybe phases
  TH.SpecialiseInstP (ty ‚à∑ TH.Type) ‚Üí
    TH.SpecialiseInstP ty
  TH.RuleP 
    (charList ‚à∑ [‚ÑÇ]) 
    (tyVarBndrListMaybe ‚à∑ Maybe [TH.TyVarBndr ()]) 
    (ruleBndrList ‚à∑ [TH.RuleBndr]) 
    (exp‚ÇÅ ‚à∑ TH.Exp) 
    (exp‚ÇÇ ‚à∑ TH.Exp)
    (phases ‚à∑ TH.Phases) ‚Üí
      TH.RuleP charList tyVarBndrListMaybe ruleBndrList exp‚ÇÅ exp‚ÇÇ phases
  TH.AnnP (annTarget ‚à∑ TH.AnnTarget) (exp ‚à∑ TH.Exp) ‚Üí
    TH.AnnP annTarget exp
  TH.LineP (i ‚à∑ HS.Int) (charList ‚à∑ [‚ÑÇ]) ‚Üí
    TH.LineP i charList
  TH.CompleteP (nameList ‚à∑ [TH.Name]) (nameMaybe ‚à∑ Maybe TH.Name) ‚Üí
    TH.CompleteP nameList nameMaybe

thIdTySynEqn ‚à∑ TH.TySynEqn ‚Üí TH.TySynEqn
thIdTySynEqn = \case
  TH.TySynEqn (tyVarBndrListMaybe ‚à∑ Maybe [TH.TyVarBndr ()]) (ty‚ÇÅ ‚à∑ TH.Type) (ty‚ÇÇ ‚à∑ TH.Type) ‚Üí
    TH.TySynEqn tyVarBndrListMaybe ty‚ÇÅ ty‚ÇÇ

thIdFamilyResultSig ‚à∑ TH.FamilyResultSig ‚Üí TH.FamilyResultSig
thIdFamilyResultSig = \case
  TH.NoSig ‚Üí
    TH.NoSig
  TH.KindSig (kind ‚à∑ TH.Kind) ‚Üí
    TH.KindSig kind
  TH.TyVarSig (tyVarBndr ‚à∑ TH.TyVarBndr ()) ‚Üí
    TH.TyVarSig tyVarBndr

thIdInjectivityAnn ‚à∑ TH.InjectivityAnn ‚Üí TH.InjectivityAnn
thIdInjectivityAnn = \case
  TH.InjectivityAnn (name ‚à∑ TH.Name) (nameList ‚à∑ [TH.Name]) ‚Üí
    TH.InjectivityAnn name nameList

thIdTypeFamilyHead ‚à∑ TH.TypeFamilyHead ‚Üí TH.TypeFamilyHead
thIdTypeFamilyHead = \case
  TH.TypeFamilyHead 
    (name ‚à∑ TH.Name) 
    (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.BndrVis]) 
    (familyResultSig ‚à∑ TH.FamilyResultSig)
    (injectivityAnnMaybe ‚à∑ Maybe TH.InjectivityAnn) ‚Üí
      TH.TypeFamilyHead name tyVarBndrList familyResultSig injectivityAnnMaybe

thIdDerivStrategy ‚à∑ TH.DerivStrategy ‚Üí TH.DerivStrategy
thIdDerivStrategy = \case
  TH.StockStrategy ‚Üí 
    TH.StockStrategy
  TH.AnyclassStrategy ‚Üí 
    TH.AnyclassStrategy
  TH.NewtypeStrategy ‚Üí 
    TH.NewtypeStrategy
  TH.ViaStrategy (ty ‚à∑ TH.Type) ‚Üí 
    TH.ViaStrategy ty

thIdPatSynArgs ‚à∑ TH.PatSynArgs ‚Üí TH.PatSynArgs
thIdPatSynArgs = \case
  TH.PrefixPatSyn (nameList ‚à∑ [TH.Name]) ‚Üí
    TH.PrefixPatSyn nameList
  TH.InfixPatSyn (name‚ÇÅ ‚à∑ TH.Name) (name‚ÇÇ ‚à∑ TH.Name) ‚Üí
    TH.InfixPatSyn name‚ÇÅ name‚ÇÇ
  TH.RecordPatSyn (nameList ‚à∑ [TH.Name]) ‚Üí
    TH.RecordPatSyn nameList

thIdPatSynDir ‚à∑ TH.PatSynDir ‚Üí TH.PatSynDir
thIdPatSynDir = \case
  TH.Unidir ‚Üí
    TH.Unidir
  TH.ImplBidir ‚Üí
    TH.ImplBidir
  TH.ExplBidir (clauseList ‚à∑ [TH.Clause]) ‚Üí
    TH.ExplBidir clauseList

thIdDec ‚à∑ TH.Dec ‚Üí TH.Dec
thIdDec = \case
  TH.FunD 
    (name ‚à∑ TH.Name) 
    (clauseList ‚à∑ [TH.Clause]) ‚Üí
      TH.FunD name clauseList
  TH.ValD 
    (pat ‚à∑ TH.Pat) 
    (body ‚à∑ TH.Body) 
    (decList ‚à∑ [TH.Dec]) ‚Üí
      TH.ValD pat body decList
  TH.DataD 
    (cxt ‚à∑ TH.Cxt) 
    (name ‚à∑ TH.Name) 
    (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.BndrVis]) 
    (kindMaybe ‚à∑ Maybe TH.Kind) 
    (conList ‚à∑ [TH.Con]) 
    (derivClauseList ‚à∑ [TH.DerivClause]) ‚Üí
      TH.DataD cxt name tyVarBndrList kindMaybe conList derivClauseList
  TH.NewtypeD
    (cxt ‚à∑ TH.Cxt) 
    (name ‚à∑ TH.Name) 
    (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.BndrVis]) 
    (kindMaybe ‚à∑ Maybe TH.Kind) 
    (con ‚à∑ TH.Con) 
    (derivClauseList ‚à∑ [TH.DerivClause]) ‚Üí
      TH.NewtypeD cxt name tyVarBndrList kindMaybe con derivClauseList
  TH.TypeDataD 
    (name ‚à∑ TH.Name) 
    (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.BndrVis]) 
    (kindMaybe ‚à∑ Maybe TH.Kind) 
    (conList ‚à∑ [TH.Con]) ‚Üí
      TH.TypeDataD name tyVarBndrList kindMaybe conList
  TH.TySynD 
    (name ‚à∑ TH.Name)
    (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.BndrVis])
    (ty ‚à∑ TH.Type) ‚Üí
      TH.TySynD name tyVarBndrList ty
  TH.ClassD 
    (cxt ‚à∑ TH.Cxt)
    (name ‚à∑ TH.Name)
    (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.BndrVis])
    (funDepList ‚à∑ [TH.FunDep])
    (decList ‚à∑ [TH.Dec]) ‚Üí
      TH.ClassD cxt name tyVarBndrList funDepList decList
  TH.InstanceD 
    (overlapMaybe ‚à∑ Maybe TH.Overlap)
    (cxt ‚à∑ TH.Cxt)
    (ty ‚à∑ TH.Type)
    (decList ‚à∑ [TH.Dec]) ‚Üí
      TH.InstanceD overlapMaybe cxt ty decList
  TH.SigD
    (name ‚à∑ TH.Name)
    (ty ‚à∑ TH.Type) ‚Üí
      TH.SigD name ty
  TH.KiSigD
    (name ‚à∑ TH.Name)
    (kind ‚à∑ TH.Kind) ‚Üí
      TH.KiSigD name kind
  TH.ForeignD
    (foreign_ ‚à∑ TH.Foreign) ‚Üí
      TH.ForeignD foreign_
  TH.InfixD
    (fixity ‚à∑ TH.Fixity)
    (name ‚à∑ TH.Name) ‚Üí
      TH.InfixD fixity name
  TH.DefaultD
    (tyList ‚à∑ [TH.Type]) ‚Üí
      TH.DefaultD tyList
  TH.PragmaD 
    (pragma ‚à∑ TH.Pragma) ‚Üí
      TH.PragmaD pragma
  TH.DataFamilyD
    (name ‚à∑ TH.Name)
    (tyVarBndrList ‚à∑ [TH.TyVarBndr TH.BndrVis])
    (kindMaybe ‚à∑ Maybe TH.Kind) ‚Üí
      TH.DataFamilyD name tyVarBndrList kindMaybe
  TH.DataInstD
    (cxt ‚à∑ TH.Cxt)
    (tyVarBndrListMaybe ‚à∑ Maybe [TH.TyVarBndr ()])
    (ty ‚à∑ TH.Type)
    (kindMaybe ‚à∑ Maybe TH.Kind)
    (conList ‚à∑ [TH.Con]) 
    (derivClauseList ‚à∑ [TH.DerivClause]) ‚Üí
      TH.DataInstD cxt tyVarBndrListMaybe ty kindMaybe conList derivClauseList
  TH.NewtypeInstD
    (cxt ‚à∑ TH.Cxt)
    (tyVarBndrListMaybe ‚à∑ Maybe [TH.TyVarBndr ()])
    (ty ‚à∑ TH.Type)
    (kindMaybe ‚à∑ Maybe TH.Kind)
    (con ‚à∑ TH.Con) 
    (derivClauseList ‚à∑ [TH.DerivClause]) ‚Üí
      TH.NewtypeInstD cxt tyVarBndrListMaybe ty kindMaybe con derivClauseList
  TH.TySynInstD
    (tySynEqn ‚à∑ TH.TySynEqn) ‚Üí
      TH.TySynInstD tySynEqn
  TH.OpenTypeFamilyD
    (typeFamilyHead ‚à∑ TH.TypeFamilyHead) ‚Üí
      TH.OpenTypeFamilyD typeFamilyHead
  TH.ClosedTypeFamilyD
    (typeFamilyHead ‚à∑ TH.TypeFamilyHead) 
    (tySynEqnList ‚à∑ [TH.TySynEqn]) ‚Üí
      TH.ClosedTypeFamilyD typeFamilyHead tySynEqnList
  TH.RoleAnnotD
    (name ‚à∑ TH.Name)
    (roleList ‚à∑ [TH.Role]) ‚Üí
      TH.RoleAnnotD name roleList
  TH.StandaloneDerivD
    (derivStrategyMaybe ‚à∑ Maybe TH.DerivStrategy)
    (cxt ‚à∑ TH.Cxt)
    (ty ‚à∑ TH.Type) ‚Üí
      TH.StandaloneDerivD derivStrategyMaybe cxt ty
  TH.DefaultSigD
    (name ‚à∑ TH.Name)
    (ty ‚à∑ TH.Type) ‚Üí
      TH.DefaultSigD name ty
  TH.PatSynD
    (name ‚à∑ TH.Name)
    (patSynArgs ‚à∑ TH.PatSynArgs)
    (patSynDir ‚à∑ TH.PatSynDir)
    (pat ‚à∑ TH.Pat) ‚Üí
      TH.PatSynD name patSynArgs patSynDir pat
  TH.PatSynSigD
    (name ‚à∑ TH.Name)
    (patSynType ‚à∑ TH.PatSynType) ‚Üí
      TH.PatSynSigD  name patSynType
  TH.ImplicitParamBindD
    (charList ‚à∑ [‚ÑÇ])
    (exp ‚à∑ TH.Exp) ‚Üí
      TH.ImplicitParamBindD charList exp

----------------
-- ADTConInfo --
----------------

data ADTConInfo = ADTConInfo
  { adtConInfoName     ‚à∑ TH.Name
  , adtConInfoArgTypes ‚à∑ [TH.Type]
  } deriving (Eq,Ord,Show)

adtConInfo ‚à∑ ùïä ‚Üí TH.Con ‚Üí TH.Q ADTConInfo
adtConInfo fname c = case c of
  TH.NormalC 
    (name ‚à∑ TH.Name) 
    (bangTypes ‚à∑ [TH.BangType]) ‚Üí 
      return $ ADTConInfo name $ mapOn bangTypes $ \ (_bang ‚à∑ TH.Bang,ty ‚à∑ TH.Type) ‚Üí ty
  TH.RecC
    (name ‚à∑ TH.Name)
    (varBangTypes ‚à∑ [TH.VarBangType]) ‚Üí
      return $ ADTConInfo name $ mapOn varBangTypes $ \ (_nameField ‚à∑ TH.Name,_bang ‚à∑ TH.Bang,ty ‚à∑ TH.Type) ‚Üí ty
  TH.InfixC
    (bangType‚ÇÅ ‚à∑ TH.BangType)
    (name ‚à∑ TH.Name)
    (bangType‚ÇÇ ‚à∑ TH.BangType) ‚Üí
      return $ ADTConInfo name $ mapOn [bangType‚ÇÅ,bangType‚ÇÇ] $ \ (_bang ‚à∑ TH.Bang,ty ‚à∑ TH.Type) ‚Üí ty
  _ ‚Üí failùïä err_adtConInfo_NOT_SIMPLE_ADT
  where
    err_adtConInfo_NOT_SIMPLE_ADT ‚à∑ ùïä
    err_adtConInfo_NOT_SIMPLE_ADT = concat $ inbetween " "
      [ "<"
      , fname
      , ">"
      , "[["
      , string $ TH.pprint c
      , "]]"
      , "wanted a simple ADT constructor,"
      , "but this is either"
      , "a forall quantified constructor `‚àÄ a. Cxt a ‚áí C a`"
      , "or a GADT constructor `C ‚à∑ a ‚Üí T b`,"
      , "neither of which are supported by UVMHS Template Haskell helpers"
      , "that operate over simple ADTs."
      ]

-------------
-- ADTInfo --
-------------

data ADTInfo = ADTInfo
  { adtInfoCxt      ‚à∑ TH.Cxt
  , adtInfoName     ‚à∑ TH.Name
  , adtInfoTypeArgs ‚à∑ [TH.TyVarBndr TH.BndrVis]
  , adtInfoCons     ‚à∑ [ADTConInfo]
  } deriving (Eq,Ord,Show)

adtInfo ‚à∑ ùïä ‚Üí TH.Name ‚Üí TH.Q ADTInfo
adtInfo fname nameADT = do
  ùíæ ‚à∑ TH.Info
    ‚Üê TH.reify nameADT
  dec ‚à∑ TH.Dec
      ‚Üê case ùíæ of
          TH.TyConI (dec ‚à∑ TH.Dec) ‚Üí return dec
          _ ‚Üí failùïä err_adtInfo_NOT_USER_DEFINED_TYPE
  case dec of
    TH.DataD 
      (cxt ‚à∑ TH.Cxt) 
      (nameCon ‚à∑ TH.Name)
      (tyVarBndrs ‚à∑ [TH.TyVarBndr TH.BndrVis])
      (kindO ‚à∑ Maybe (TH.Kind))
      (cons ‚à∑ [TH.Con])
      (_derivClauses ‚à∑ [TH.DerivClause]) ‚Üí do
        when (not $ kindO ‚â° Nothing ‚©î kindO ‚â° Just TH.StarT) $ \ () ‚Üí 
          failùïä $ err_adtInfo_BAD_KIND kindO
        ADTInfo cxt nameCon tyVarBndrs ^$ mapM (adtConInfo fname) cons
    TH.NewtypeD 
      (cxt ‚à∑ TH.Cxt) 
      (nameCon ‚à∑ TH.Name) 
      (tyVarBndrs ‚à∑ [TH.TyVarBndr TH.BndrVis])
      (kindO ‚à∑ Maybe (TH.Kind))
      (con ‚à∑ TH.Con)
      (_derivClauses ‚à∑ [TH.DerivClause]) ‚Üí do
        when (not $ kindO ‚â° Nothing ‚©î kindO ‚â° Just TH.StarT) $ \ () ‚Üí 
          failùïä $ err_adtInfo_BAD_KIND kindO
        ADTInfo cxt nameCon tyVarBndrs ‚àò single ^$ adtConInfo fname con
    _ ‚Üí failùïä err_adtInfo_NOT_DATA_NEWTYPE
  where
    err_adtInfo_NOT_USER_DEFINED_TYPE ‚à∑ ùïä
    err_adtInfo_NOT_USER_DEFINED_TYPE = concat $ inbetween " "
      [ "<"
      , fname
      , ">"
      , "[["
      , string $ TH.pprint nameADT
      , "]]"
      , "not a user-defined type."
      ] 
    err_adtInfo_BAD_KIND ‚à∑ Maybe TH.Kind ‚Üí ùïä
    err_adtInfo_BAD_KIND kindO = concat $ inbetween " "
      [ "<"
      , fname
      , ">"
      , "[["
      , string $ TH.pprint nameADT
      , "‚à∑"
      , case kindO of Nothing ‚Üí "<no-kind-annotation>" ; Just kind ‚Üí string $ TH.pprint kind
      , "]]"
      , "datatype declaration with kind annotations"
      , "at kind other than ‚òÖ"
      , "are not supported."
      ]
    err_adtInfo_NOT_DATA_NEWTYPE ‚à∑ ùïä
    err_adtInfo_NOT_DATA_NEWTYPE = concat $ inbetween " "
      [ "<"
      , fname
      , ">"
      , "[["
      , string $ TH.pprint nameADT
      , "]]"
      , "wanted a datatype or newtype declaration,"
      , "but this is neither."
      ]

adtInfoTypeArgsNameMap ‚à∑ ADTInfo ‚Üí ùïä ‚á∞ TH.Name
adtInfoTypeArgsNameMap ùíæ =
  dict $ mapOn (adtInfoTypeArgs ùíæ) $ \ (tyVarBndr ‚à∑ TH.TyVarBndr TH.BndrVis) ‚Üí 
    let name = thTyVarBndrName tyVarBndr in 
    thNameString name ‚Ü¶ name

adtInfoAllConArgs ‚à∑ ADTInfo ‚Üí [TH.Type]
adtInfoAllConArgs = 
  lazyList 
  ‚àò uniquesùëÉ 
  ‚àò concat 
  ‚àò map adtConInfoArgTypes
  ‚àò adtInfoCons

adtInfoAllConArgsQ ‚à∑ ADTInfo ‚Üí [TH.TypeQ]
adtInfoAllConArgsQ = map return ‚àò adtInfoAllConArgs

adtInfoTypeArgVars ‚à∑ ADTInfo ‚Üí [TH.Type]
adtInfoTypeArgVars = map (TH.VarT ‚àò thTyVarBndrName) ‚àò adtInfoTypeArgs

adtInfoTypeArgVarsQ ‚à∑ ADTInfo ‚Üí [TH.TypeQ]
adtInfoTypeArgVarsQ = map return ‚àò adtInfoTypeArgVars

adtInfoFullType ‚à∑ ADTInfo ‚Üí TH.Type
adtInfoFullType ùíæ = apply TH.AppT (TH.ConT (adtInfoName ùíæ)) $ adtInfoTypeArgVars ùíæ

adtInfoFullTypeQ ‚à∑ ADTInfo ‚Üí TH.TypeQ
adtInfoFullTypeQ = return ‚àò adtInfoFullType

adtInfoCasesQ ‚à∑ ADTInfo ‚Üí (TH.ExpQ ‚Üí [TH.ExpQ] ‚Üí TH.ExpQ) ‚Üí TH.ExpQ
adtInfoCasesQ ùíæ f = TH.LamCaseE ^$ mapMOn (adtInfoCons ùíæ) $ \ ùíæC ‚Üí do
  xs ‚Üê mapMOn (adtConInfoArgTypes ùíæC) $ const $ thGensym
  let pat ‚à∑ TH.Pat
      pat = TH.ConP (adtConInfoName ùíæC) [] $ map TH.VarP xs
  body ‚à∑ TH.Body
       ‚Üê TH.NormalB ^$ f (return $ TH.VarE $ adtConInfoName ùíæC) $ map (return ‚àò TH.VarE) xs
  return $ TH.Match pat body []

adtInfoConssQ ‚à∑ ADTInfo ‚Üí (TH.ExpQ ‚Üí [TH.TypeQ] ‚Üí TH.ExpQ) ‚Üí [TH.ExpQ]
adtInfoConssQ ùíæ f = mapOn (adtInfoCons ùíæ) $ \ ùíæC ‚Üí f (TH.varE $ adtConInfoName ùíæC) $ map return $ adtConInfoArgTypes ùíæC

-----------------
-- ADTProdInfo --
-----------------

data ADTProdInfo = ADTProdInfo
  { adtProdInfoCxt      ‚à∑ TH.Cxt
  , adtProdInfoName     ‚à∑ TH.Name
  , adtProdInfoTypeArgs ‚à∑ [TH.TyVarBndr TH.BndrVis]
  , adtProdInfoCon      ‚à∑ ADTConInfo
  } deriving (Eq,Ord,Show)

adtProdInfo ‚à∑ ùïä ‚Üí TH.Name ‚Üí TH.Q ADTProdInfo
adtProdInfo fname name = do
  ADTInfo cxt nameCon typeArgs cons ‚Üê adtInfo fname name
  con ‚Üê case view singleL $ list cons of
    None ‚Üí failùïä err_adtProdInfo_NOT_SINGLE_CONSTRUCTOR
    Some con ‚Üí return con
  return $ ADTProdInfo cxt nameCon typeArgs con
  where
    err_adtProdInfo_NOT_SINGLE_CONSTRUCTOR ‚à∑ ùïä
    err_adtProdInfo_NOT_SINGLE_CONSTRUCTOR = concat $ inbetween " "
      [ "<"
      , fname
      , ">"
      , "[["
      , string $ TH.pprint name
      , "]]"
      , "not a datatype with a single constructor"
      ]

adtProdInfoAllConArgs ‚à∑ ADTProdInfo ‚Üí [TH.Type]
adtProdInfoAllConArgs = 
  lazyList 
  ‚àò uniquesùëÉ 
  ‚àò adtConInfoArgTypes
  ‚àò adtProdInfoCon

adtProdInfoAllConArgsQ ‚à∑ ADTProdInfo ‚Üí [TH.TypeQ]
adtProdInfoAllConArgsQ = map return ‚àò adtProdInfoAllConArgs

adtProdInfoTypeArgVars ‚à∑ ADTProdInfo ‚Üí [TH.Type]
adtProdInfoTypeArgVars = map (TH.VarT ‚àò thTyVarBndrName) ‚àò adtProdInfoTypeArgs

adtProdInfoTypeArgVarsQ ‚à∑ ADTProdInfo ‚Üí [TH.TypeQ]
adtProdInfoTypeArgVarsQ = map return ‚àò adtProdInfoTypeArgVars

adtProdInfoFullType ‚à∑ ADTProdInfo ‚Üí TH.Type
adtProdInfoFullType ùíæ = apply TH.AppT (TH.ConT (adtProdInfoName ùíæ)) $ adtProdInfoTypeArgVars ùíæ

adtProdInfoFullTypeQ ‚à∑ ADTProdInfo ‚Üí TH.TypeQ
adtProdInfoFullTypeQ = return ‚àò adtProdInfoFullType

adtProdInfoLetQ ‚à∑ ADTProdInfo ‚Üí TH.ExpQ ‚Üí ([TH.ExpQ] ‚Üí TH.ExpQ) ‚Üí TH.ExpQ
adtProdInfoLetQ ùíæ e f = do
  let ùíæC = adtProdInfoCon ùíæ
  xs ‚Üê mapMOn (adtConInfoArgTypes ùíæC) $ const $ thGensym
  [| let $(TH.conP (adtConInfoName ùíæC) $ map TH.varP xs) = $e in 
     $(f $ map TH.varE xs) 
   |]

adtProdInfoConsQ ‚à∑ ADTProdInfo ‚Üí (TH.ExpQ ‚Üí [TH.TypeQ] ‚Üí TH.ExpQ) ‚Üí TH.ExpQ
adtProdInfoConsQ ùíæ f = 
  let ùíæC = adtProdInfoCon ùíæ in
  f (TH.varE $ adtConInfoName ùíæC) $ map return $ adtConInfoArgTypes ùíæC

----------------------
-- ADTRecordConInfo --
----------------------

data ADTRecordConInfo = ADTRecordConInfo
  { adtRecordConInfoName ‚à∑ TH.Name
  , adtRecordConInfoArgTypes ‚à∑ [(TH.Name,TH.Type)]
  } deriving (Eq,Ord,Show)

-------------------
-- ADTRecordInfo --
-------------------

data ADTRecordInfo = ADTRecordInfo
  { adtRecordInfoCxt ‚à∑ TH.Cxt
  , adtRecordInfoName ‚à∑ TH.Name
  , adtRecordInfoTypeArgs ‚à∑ [TH.TyVarBndr TH.BndrVis]
  , adtRecordInfoCon ‚à∑ ADTRecordConInfo
  } deriving (Eq,Ord,Show)


-------------------
-- DERIVING LENS --
-------------------

-- createLensDefs ‚à∑ TH.Name ‚Üí TH.DecsQ
-- createLensDefs name = do
--   ùíæ ‚Üê adtRecordInfo name
--   [d| instance
--         $(thTupsTQ $ mapOn (adtProdInfoAllConArgsQ ùíæ) $ \ œÑ ‚Üí [t| Null $œÑ |])
--         ‚áí
--         Null $(adtProdInfoFullTypeQ ùíæ)
--         where
--           null = $(adtProdInfoConsQ ùíæ $ \ mk œÑs ‚Üí
--             foldOnFrom œÑs mk $ \ œÑ eQ ‚Üí [| $eQ (null @($œÑ)) |])
--       instance
--         $(thTupsTQ $ mapOn (adtProdInfoAllConArgsQ ùíæ) $ \ œÑ ‚Üí [t| Append $œÑ |])
--         ‚áí
--         Append $(adtProdInfoFullTypeQ ùíæ)
--         where
--           x ‚ß∫ y = $(adtProdInfoLetQ ùíæ [| x |] $ \ xs ‚Üí adtProdInfoLetQ ùíæ [| y |] $ \ ys ‚Üí
--             adtProdInfoConsQ ùíæ $ \ mk _œÑs ‚Üí
--               foldOnFrom (zip xs ys) mk $ uncurry $ \ x·µ¢ y·µ¢ eQ ‚Üí [| $eQ ($x·µ¢ ‚ß∫ $y·µ¢) |])
--       instance
--         $(thTupsTQ $ mapOn (adtProdInfoAllConArgsQ ùíæ) $ \ œÑ ‚Üí [t| Monoid $œÑ |])
--         ‚áí
--         Monoid $(adtProdInfoFullTypeQ ùíæ)
--    |]

---------------------
-- DERIVING MONOID --
---------------------

createMonoidInstance ‚à∑ TH.Name ‚Üí TH.DecsQ
createMonoidInstance name = do
  ùíæ ‚Üê adtProdInfo "createMonoidInstance" name
  [d| instance
        $(thTupsTQ $ mapOn (adtProdInfoAllConArgsQ ùíæ) $ \ œÑ ‚Üí [t| Null $œÑ |])
        ‚áí
        Null $(adtProdInfoFullTypeQ ùíæ)
        where
          null = $(adtProdInfoConsQ ùíæ $ \ mk œÑs ‚Üí
            foldOnFrom œÑs mk $ \ œÑ eQ ‚Üí [| $eQ (null @($œÑ)) |])
      instance
        $(thTupsTQ $ mapOn (adtProdInfoAllConArgsQ ùíæ) $ \ œÑ ‚Üí [t| Append $œÑ |])
        ‚áí
        Append $(adtProdInfoFullTypeQ ùíæ)
        where
          x ‚ß∫ y = $(adtProdInfoLetQ ùíæ [| x |] $ \ xs ‚Üí adtProdInfoLetQ ùíæ [| y |] $ \ ys ‚Üí
            adtProdInfoConsQ ùíæ $ \ mk _œÑs ‚Üí
              foldOnFrom (zip xs ys) mk $ uncurry $ \ x·µ¢ y·µ¢ eQ ‚Üí [| $eQ ($x·µ¢ ‚ß∫ $y·µ¢) |])
      instance
        $(thTupsTQ $ mapOn (adtProdInfoAllConArgsQ ùíæ) $ \ œÑ ‚Üí [t| Monoid $œÑ |])
        ‚áí
        Monoid $(adtProdInfoFullTypeQ ùíæ)
   |]

--------------------
-- DERIVING FUZZY --
--------------------

createFuzzyInstance ‚à∑ [ùïä] ‚Üí TH.Name ‚Üí TH.DecsQ
createFuzzyInstance recNamesS name = do
  when (count @‚Ñï64 (powùëÉ recNamesS) ‚â¢ count recNamesS) $ \ () ‚Üí
    fail $ err_MSG_DUPLICATE_REC_NAMES ()
  ùíæ ‚Üê adtInfo "createFuzzyInstance" name
  let nameMap ‚à∑ ùïä ‚á∞ TH.Name
      nameMap = adtInfoTypeArgsNameMap ùíæ
  recNames ‚à∑ ùëÉ TH.Name
            ‚Üê pow ^$ mapMOn recNamesS $ \ name·µ¢ ‚Üí do
    case nameMap ‚ãï? name·µ¢ of
      None ‚Üí fail $ err_MSG_INVALID_REC_NAME nameMap
      Some name·µ£ ‚Üí return name·µ£
  let recNames' ‚à∑ ùëÉ TH.Name
      recNames' = recNames ‚à™ single name
  [d| instance 
        $(thTupsTQ $ mapOn (adtInfoAllConArgsQ ùíæ) $ \ œÑ ‚Üí [t| Fuzzy $œÑ |])
        ‚áí
        Fuzzy $(adtInfoFullTypeQ ùíæ) 
        where
          fuzzy = do
            d ‚Üê fuzzyDepth
            wrchoose 
              $(TH.listE $ adtInfoConssQ ùíæ $ \ mk œÑs ‚Üí do
                  (con :* (anyRec :* nonRec :* stmts)) 
                    ‚à∑ TH.ExpQ ‚àß (ùîπ ‚àß ‚Ñï64 ‚àß ùêº TH.StmtQ)
                    ‚Üê evalRWST () mk $ retStateOut $ eachOn œÑs $ \ œÑ ‚Üí UVMHS.Core.do
                      x' ‚Üê lift thGensym
                      modify $ \ eQ ‚Üí [| $eQ $(TH.varE x') |]
                      isRec ‚à∑ ùîπ
                            ‚Üê lift $ thAnyNameOccursInType recNames' ^$ œÑ
                      tellL (fstL ‚äö fstL) isRec
                      when (not isRec) $ \ () ‚Üí
                        tellL (sndL ‚äö fstL) one
                      tellL sndL $ single $ TH.bindS (TH.varP x') $ if not isRec then [| fuzzy @($œÑ) |] else [| fuzzyRec @($œÑ) |]
                  when (anyRec ‚©ì nonRec ‚â° zero) $ \ () ‚Üí
                    fail $ "not ok to have only recursive fields in constructor: " ‚ß∫ show anyRec ‚ß∫ " " ‚ß∫ show nonRec
                  let weight = if anyRec then [| d |] else [| one |]
                  [| \ () ‚Üí $(weight) :* $(TH.doE $ lazyList $ concat [stmts,single $ TH.noBindS [| return $con |]]) |])
   |]
  where
    err_MSG_DUPLICATE_REC_NAMES ‚à∑ () ‚Üí [‚ÑÇ]
    err_MSG_DUPLICATE_REC_NAMES () = concat $ inbetween " "
      [ "createFuzzyInstance:"
      , "[["
      , TH.pprint name
      , ","
      , lazyList $ ppRenderNoFmt $ pretty recNamesS
      , "]]"
      , "the list of provided names"
      , "should not include any duplicates"
      , "(purely as a sanity check)."
      ]
    err_MSG_INVALID_REC_NAME ‚à∑ ùïä ‚á∞ TH.Name ‚Üí [‚ÑÇ]
    err_MSG_INVALID_REC_NAME nameMap = concat $ inbetween " " $
      [ "createFuzzyInstance:"
      , "[["
      , TH.pprint name
      , ","
      , lazyList $ ppRenderNoFmt $ pretty recNamesS
      , "]]"
      , "each provided name must must match"
      , "the name of a type variable argument"
      , "for the declared data type."
      , "valid options are:"
      , show $ dkeys nameMap
      ]

data OtherList a b =
    NilA a b
  | NilB b
  | ConsB b (OtherList a b)
