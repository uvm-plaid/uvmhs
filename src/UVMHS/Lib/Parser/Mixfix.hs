module UVMHS.Lib.Parser.Mixfix where

import UVMHS.Core

import UVMHS.Lib.Annotated

import UVMHS.Lib.Parser.ParserContext
import UVMHS.Lib.Parser.Parser

-----------------------------------
-- Fully Functor/Comonad general --
-----------------------------------

data MixesF t f a = MixesF
  { mixesFPrefix  ‚à∑ Parser t (f a ‚Üí a)
  , mixesFPostfix ‚à∑ Parser t (f a ‚Üí a)
  , mixesFInfix  ‚à∑ Parser t (f a ‚Üí f a ‚Üí a)
  , mixesFInfixL ‚à∑ Parser t (f a ‚Üí f a ‚Üí a)
  , mixesFInfixR ‚à∑ Parser t (f a ‚Üí f a ‚Üí a)
  }

instance Null (MixesF t f a) where null = MixesF null null null null null
instance (Ord t) ‚áí Append (MixesF t f a) where
  MixesF pre‚ÇÅ post‚ÇÅ inf‚ÇÅ infl‚ÇÅ infr‚ÇÅ ‚ß∫ MixesF pre‚ÇÇ post‚ÇÇ inf‚ÇÇ infl‚ÇÇ infr‚ÇÇ =
    MixesF (pre‚ÇÅ ‚ß∫ pre‚ÇÇ) (post‚ÇÅ ‚ß∫ post‚ÇÇ) (inf‚ÇÅ ‚ß∫ inf‚ÇÇ) (infl‚ÇÅ ‚ß∫ infl‚ÇÇ) $ infr‚ÇÅ ‚ß∫ infr‚ÇÇ
instance (Ord t) ‚áí Monoid (MixesF t f a)

data MixfixF t f a = MixfixF
  { mixfixFTerminals ‚à∑ Parser t a
  , mixfixFLevels ‚à∑ ‚Ñï64 ‚á∞ MixesF t f a
  }
instance Null (MixfixF t f a) where null = MixfixF null null
instance (Ord t) ‚áí Append (MixfixF t f a) where MixfixF ts‚ÇÅ ls‚ÇÅ ‚ß∫ MixfixF ts‚ÇÇ ls‚ÇÇ = MixfixF (ts‚ÇÅ ‚ß∫ ts‚ÇÇ) (ls‚ÇÅ ‚ß∫ ls‚ÇÇ)
instance (Ord t) ‚áí Monoid (MixfixF t f a)

onlyTerminalsF ‚à∑ MixfixF t f a ‚Üí MixfixF t f a
onlyTerminalsF m = MixfixF (mixfixFTerminals m) null

fmixPrefix ‚à∑ ‚Ñï64 ‚Üí Parser t (f a ‚Üí a) ‚Üí MixfixF t f a
fmixPrefix l p = null { mixfixFLevels = dict [ l ‚Ü¶‚ô≠ null {mixesFPrefix = p} ] }

fmixPostfix ‚à∑ ‚Ñï64 ‚Üí Parser t (f a ‚Üí a) ‚Üí MixfixF t f a
fmixPostfix l p = null { mixfixFLevels = dict [ l ‚Ü¶‚ô≠ null {mixesFPostfix = p} ] }

fmixInfix ‚à∑ ‚Ñï64 ‚Üí Parser t (f a ‚Üí f a ‚Üí a) ‚Üí MixfixF t f a
fmixInfix l p = null { mixfixFLevels = dict [ l ‚Ü¶‚ô≠ null {mixesFInfix = p} ] }

fmixInfixL ‚à∑ ‚Ñï64 ‚Üí Parser t (f a ‚Üí f a ‚Üí a) ‚Üí MixfixF t f a
fmixInfixL l p = null { mixfixFLevels = dict [ l ‚Ü¶‚ô≠ null {mixesFInfixL = p} ] }

fmixInfixR ‚à∑ ‚Ñï64 ‚Üí Parser t (f a ‚Üí f a ‚Üí a) ‚Üí MixfixF t f a
fmixInfixR l p = null { mixfixFLevels = dict [ l ‚Ü¶‚ô≠ null {mixesFInfixR = p} ] }

fmixTerminal ‚à∑ Parser t a ‚Üí MixfixF t f a
fmixTerminal p = null { mixfixFTerminals = p}

-- PRE PRE x INFR PRE PRE y
-- ‚âà
-- PRE (PRE (x INFR (PRE (PRE y))))
--
-- x POST POST INFL y POST POST
-- ‚âà
-- ((((x POST) POST) INFL y) POST) POST

fmixfix ‚à∑
  ‚àÄ t f a. (Ord t,Comonad f)
  ‚áí (Parser t (f a) ‚Üí Parser t (f a))
  ‚Üí (Parser t (f a) ‚Üí Parser t (f a))
  ‚Üí (Parser t a ‚Üí Parser t (f a))
  ‚Üí MixfixF t f a
  ‚Üí Parser t (f a)
fmixfix new bracket cxt (MixfixF terms levels‚ÇÄ) = loop levels‚ÇÄ
  where
    loop ‚à∑ ‚Ñï64 ‚á∞ MixesF t f a ‚Üí Parser t (f a)
    loop levels = case dminView levels of
      None ‚Üí new $ cxt terms
      Some ((i :* mixes) :* levels') ‚Üí
        let msg = "lvl " ‚ß∫ alignRightFill '0' 3 (showùïä i)
        in
        new $ cxt $ buildLevelDirected msg mixes $
        new $ cxt $ buildLevelNondirected msg mixes $
        loop levels'
    buildLevelNondirected ‚à∑ ùïä ‚Üí MixesF t f a ‚Üí Parser t (f a) ‚Üí Parser t a
    buildLevelNondirected msg mixes nextLevel = do
      x ‚Üê nextLevel
      concat
        [ pErr (msg ‚ß∫ " infix") $ levelInfAfterOne x mixes nextLevel
        , return $ extract x
        ]
    buildLevelDirected ‚à∑ ùïä ‚Üí MixesF t f a ‚Üí Parser t (f a) ‚Üí Parser t a
    buildLevelDirected msg mixes nextLevel = concat
      [ do
          x ‚Üê nextLevel
          concat
            [ pErr (msg ‚ß∫ " infixl") $ levelInflAfterOne x mixes nextLevel
            , pErr (msg ‚ß∫ " infixr") $ levelInfrAfterOne x mixes nextLevel
            , return $ extract x
            ]
      , pErr (msg ‚ß∫ " infixr") $ levelInfrNotAfterOne mixes nextLevel
      ]
    levelInfAfterOne ‚à∑ f a ‚Üí MixesF t f a ‚Üí Parser t (f a) ‚Üí Parser t a
    levelInfAfterOne x‚ÇÅ mixes nextLevel = do
      f ‚Üê mixesFInfix mixes
      x‚ÇÇ ‚Üê nextLevel
      return $ f x‚ÇÅ x‚ÇÇ
    levelInflAfterOne ‚à∑ f a ‚Üí MixesF t f a ‚Üí Parser t (f a) ‚Üí Parser t a
    levelInflAfterOne x‚ÇÅ mixes nextLevel = do
      x‚ÇÅ' ‚Üê cxt $ concat
        [ do f ‚Üê mixesFInfixL mixes
             x‚ÇÇ ‚Üê nextLevel
             return $ f x‚ÇÅ x‚ÇÇ
        , do f ‚Üê mixesFPostfix mixes
             return $ f x‚ÇÅ
        ]
      concat
        [ levelInflAfterOne x‚ÇÅ' mixes nextLevel
        , return $ extract x‚ÇÅ'
        ]
    levelInfrAfterOne ‚à∑ f a ‚Üí MixesF t f a ‚Üí Parser t (f a) ‚Üí Parser t a
    levelInfrAfterOne x‚ÇÅ mixes nextLevel = do
      f ‚Üê mixesFInfixR mixes
      x‚ÇÇ ‚Üê bracket $ cxt $ levelInfr mixes nextLevel
      return $ f x‚ÇÅ x‚ÇÇ
    levelInfr ‚à∑ MixesF t f a ‚Üí Parser t (f a) ‚Üí Parser t a
    levelInfr mixes nextLevel = concat
      [ do x‚ÇÅ ‚Üê nextLevel
           concat
             [ levelInfrAfterOne x‚ÇÅ mixes nextLevel
             , return $ extract x‚ÇÅ
             ]
      , levelInfrNotAfterOne mixes nextLevel
      ]
    levelInfrNotAfterOne ‚à∑ MixesF t f a ‚Üí Parser t (f a) ‚Üí Parser t a
    levelInfrNotAfterOne mixes nextLevel = do
      f ‚Üê mixesFPrefix mixes
      x ‚Üê bracket $ cxt $ levelInfr mixes nextLevel
      return $ f x

fmixfixWithContext ‚à∑ ‚àÄ t a. (Ord t) ‚áí ùïä ‚Üí MixfixF t (ùê¥ SrcCxt) a ‚Üí Parser t (ùê¥ SrcCxt a)
fmixfixWithContext s = fmixfix (pNewContext s) pNewExpressionContext pWithContextRendered

fmixfixWithContextSet ‚à∑ ‚àÄ t a. (Ord t) ‚áí ùïä ‚Üí MixfixF t (ùê¥ (ùëÉ SrcCxt)) a ‚Üí Parser t (ùê¥ (ùëÉ SrcCxt) a)
fmixfixWithContextSet s = fmixfix (pNewContext s) pNewExpressionContext (map (mapATag single) ‚àò pWithContextRendered)

---------------
-- Non-fancy --
---------------

data Mixes t a = Mixes
  { mixesPrefix  ‚à∑ Parser t (a ‚Üí a)
  , mixesPostfix ‚à∑ Parser t (a ‚Üí a)
  , mixesInfix  ‚à∑ Parser t (a ‚Üí a ‚Üí a)
  , mixesInfixL ‚à∑ Parser t (a ‚Üí a ‚Üí a)
  , mixesInfixR ‚à∑ Parser t (a ‚Üí a ‚Üí a)
  }

instance Null (Mixes t a) where null = Mixes null null null null null
instance (Ord t) ‚áí Append (Mixes t a) where
  Mixes pre‚ÇÅ post‚ÇÅ inf‚ÇÅ infl‚ÇÅ infr‚ÇÅ ‚ß∫ Mixes pre‚ÇÇ post‚ÇÇ inf‚ÇÇ infl‚ÇÇ infr‚ÇÇ =
    Mixes (pre‚ÇÅ ‚ß∫ pre‚ÇÇ) (post‚ÇÅ ‚ß∫ post‚ÇÇ) (inf‚ÇÅ ‚ß∫ inf‚ÇÇ) (infl‚ÇÅ ‚ß∫ infl‚ÇÇ) (infr‚ÇÅ ‚ß∫ infr‚ÇÇ)
instance (Ord t) ‚áí Monoid (Mixes t a)

data Mixfix t a = Mixfix
  { mixfixTerminals ‚à∑ Parser t a
  , mixfixLevels ‚à∑ ‚Ñï64 ‚á∞ Mixes t a
  }

instance Null (Mixfix t a) where null = Mixfix null bot
instance (Ord t) ‚áí Append (Mixfix t a) where Mixfix ts‚ÇÅ ls‚ÇÅ ‚ß∫ Mixfix ts‚ÇÇ ls‚ÇÇ = Mixfix (ts‚ÇÅ ‚ß∫ ts‚ÇÇ) (ls‚ÇÅ ‚ß∫ ls‚ÇÇ)
instance (Ord t) ‚áí Monoid (Mixfix t a)

mixPrefix ‚à∑ ‚Ñï64 ‚Üí Parser t (a ‚Üí a) ‚Üí Mixfix t a
mixPrefix l p = null { mixfixLevels = dict [ l ‚Ü¶‚ô≠ null {mixesPrefix = p} ] }

mixPostfix ‚à∑ ‚Ñï64 ‚Üí Parser t (a ‚Üí a) ‚Üí Mixfix t a
mixPostfix l p = null { mixfixLevels = dict [ l ‚Ü¶‚ô≠ null {mixesPostfix = p} ] }

mixInfix ‚à∑ ‚Ñï64 ‚Üí Parser t (a ‚Üí a ‚Üí a) ‚Üí Mixfix t a
mixInfix l p = null { mixfixLevels = dict [ l ‚Ü¶‚ô≠ null {mixesInfix = p} ] }

mixInfixL ‚à∑ ‚Ñï64 ‚Üí Parser t (a ‚Üí a ‚Üí a) ‚Üí Mixfix t a
mixInfixL l p = null { mixfixLevels = dict [ l ‚Ü¶‚ô≠ null {mixesInfixL = p} ] }

mixInfixR ‚à∑ ‚Ñï64 ‚Üí Parser t (a ‚Üí a ‚Üí a) ‚Üí Mixfix t a
mixInfixR l p = null { mixfixLevels = dict [ l ‚Ü¶‚ô≠ null {mixesInfixR = p} ] }

mixTerminal ‚à∑ Parser t a ‚Üí Mixfix t a
mixTerminal p = null { mixfixTerminals = p}

mixesPure ‚à∑ (Ord t) ‚áí Mixes t a ‚Üí MixesF t ID a
mixesPure (Mixes pre post inf infl infr) =
  MixesF
  (map kextract pre)
  (map kextract post)
  (map kextract2 inf)
  (map kextract2 infl)
  (map kextract2 infr)

mixfixPure ‚à∑ (Ord t) ‚áí Mixfix t a ‚Üí MixfixF t ID a
mixfixPure (Mixfix terminals levels) = MixfixF terminals $ map mixesPure levels

mixfix ‚à∑ (Ord t) ‚áí Mixfix t a ‚Üí Parser t a
mixfix mix = unID ^$ fmixfix id id (map ID) (mixfixPure mix)

mixfixWithContext ‚à∑ (Ord t) ‚áí ùïä ‚Üí Mixfix t a ‚Üí Parser t (ùê¥ SrcCxt a)
mixfixWithContext s = pNewContext s ‚àò pWithContextRendered ‚àò mixfix
