module UVMHS.Lib.Substitution.Var where

import UVMHS.Core
import UVMHS.Lib.Pretty
import UVMHS.Lib.Parser
import UVMHS.Lib.Rand
import UVMHS.Lib.Fuzzy
import UVMHS.Lib.Shrinky

import UVMHS.Lib.Substitution.Name

---------------------------------------------------------------------
-- ==== --
-- DVar --
-- ==== --
---------------------------------------------------------------------

-- De Bruijn Index
newtype DVar = DVar { unDVar ‚à∑ ‚Ñï64 }
  deriving (Eq,Ord,Show,Fuzzy,Shrinky)
makeLenses ''DVar

instance Pretty DVar where
  pretty (DVar n) = ppPun $ concat ["‚Ä¢:",showùïä n]

syntaxDVar ‚à∑ LexerBasicSyntax
syntaxDVar = concat
  [ null { lexerBasicSyntaxPuns = pow ["‚Ä¢",":"] }
  ]

pDVarTail ‚à∑ CParser TokenBasic DVar
pDVarTail = DVar ^$ cpNat64

pDVar ‚à∑ CParser TokenBasic DVar
pDVar = do 
  void $ cpSyntax "‚Ä¢"
  void $ cpSyntax ":"
  pDVarTail

---------------------------------------------------------------------
-- ==== --
-- NVar --
-- ==== --
---------------------------------------------------------------------

-- Named variables with a De Bruijn index
-- Œª x. Œª x. x:0
--        ‚îî‚îÄ‚îÄ‚îÄ‚îò
-- Œª x. Œª x. x:1
--   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
data NVar = NVar
  { nvarIndex ‚à∑ DVar
  , nvarName  ‚à∑ Name
  } deriving (Eq,Ord,Show)
makeLenses ''NVar

nvar_Name ‚à∑ Name ‚Üí NVar
nvar_Name = NVar $ DVar 0

name_NVarL ‚à∑ NVar ‚å≤ Name
name_NVarL = prism nvar_Name $ \ (NVar n x) ‚Üí if n ‚â° DVar 0 then Some x else None

gensymNVar ‚à∑ (Monad m,MonadState s m) ‚áí s ‚ü¢ ‚Ñï64 ‚Üí ùïä ‚Üí m NVar
gensymNVar ‚Ñì s = nvar_Name ^$ gensymName ‚Ñì s

instance Fuzzy NVar where 
  fuzzy = return NVar ‚ä° fuzzy ‚ä° fuzzy

instance Shrinky NVar where 
  shrink (NVar n x) = do
    (n',x') ‚Üê shrink (n,x)
    return $ NVar n' x'

instance Pretty NVar where
  pretty (NVar n x) = concat
    [ pretty x
    , if n ‚â° DVar 0 then null else ppPun $ concat [":",showùïä $ unDVar n]
    ]

syntaxNVar ‚à∑ LexerBasicSyntax
syntaxNVar = concat
  [ syntaxName
  , syntaxDVar
  ]

pNVarTail ‚à∑ Name ‚Üí CParser TokenBasic NVar
pNVarTail x = do
  n ‚Üê ifNone (DVar 0) ^$ cpOptional $ do
    void $ cpSyntax ":"
    pDVarTail
  return $ NVar n x

pNVar ‚à∑ CParser TokenBasic NVar
pNVar = do
  x ‚Üê pName
  pNVarTail x

---------------------------------------------------------------------
-- ==== --
-- GVar --
-- ==== --
---------------------------------------------------------------------

-- Global Variables
newtype GVar = GVar { unGVar ‚à∑ Name }
  deriving (Eq,Ord,Show,Fuzzy,Shrinky)
makeLenses ''GVar

instance Pretty GVar where
  pretty (GVar x) = concat [pretty x,ppPun ":g"]

syntaxGVar ‚à∑ LexerBasicSyntax
syntaxGVar = concat
  [ syntaxName
  , null { lexerBasicSyntaxPuns = pow [":g"] }
  ]

pGVarTail ‚à∑ Name ‚Üí CParser TokenBasic GVar
pGVarTail x = do
  void $ cpSyntax ":g"
  return $ GVar x

pGVar ‚à∑ CParser TokenBasic GVar
pGVar = do
  x ‚Üê pName
  pGVarTail x

---------------------------------------------------------------------
-- ==== --
-- SVar --
-- ==== --
---------------------------------------------------------------------

-- Scoped Variables: either De Bruijn scoped or Named scoped
data SVar =
    D_SVar DVar
  | N_SVar NVar
  deriving (Eq,Ord,Show)
makePrisms ''SVar
makePrettyUnion ''SVar

mkSVar ‚à∑ SName ‚Üí DVar ‚Üí SVar
mkSVar xO n = case xO of
  D_SName ‚Üí D_SVar n
  N_SName x ‚Üí N_SVar $ NVar n x

svarName ‚à∑ SVar ‚Üí SName
svarName = \case
  D_SVar _          ‚Üí D_SName
  N_SVar (NVar _ x) ‚Üí N_SName x

svarLevel ‚à∑ SVar ‚Üí DVar
svarLevel = \case
  D_SVar n ‚Üí n
  N_SVar (NVar n _x) ‚Üí n

instance Fuzzy SVar where 
  fuzzy = rchoose
    [ \ () ‚Üí D_SVar ^$ fuzzy
    , \ () ‚Üí N_SVar ^$ fuzzy
    ]

instance Shrinky SVar where 
  shrink = \case
    D_SVar x ‚Üí D_SVar ^$ shrink x
    N_SVar x ‚Üí N_SVar ^$ shrink x

---------------------------------------------------------------------
-- === --
-- Var --
-- === --
---------------------------------------------------------------------

-- Variables: either De Bruijn, Named or Global
data Var =
    D_Var DVar
  | N_Var NVar
  | G_Var GVar
  deriving (Eq,Ord,Show)
makePrisms ''Var
makePrettyUnion ''Var

var_Name ‚à∑ Name ‚Üí Var
var_Name = N_Var ‚àò nvar_Name

name_VarL ‚à∑ Var ‚å≤ Name
name_VarL = name_NVarL ‚äö n_VarL

gensymVar ‚à∑ (Monad m,MonadState s m) ‚áí s ‚ü¢ ‚Ñï64 ‚Üí ùïä ‚Üí m Var
gensymVar ‚Ñì s = N_Var ^$ gensymNVar ‚Ñì s

instance Fuzzy Var where
  fuzzy = rchoose
    [ \ () ‚Üí D_Var ^$ fuzzy
    , \ () ‚Üí N_Var ^$ fuzzy
    , \ () ‚Üí G_Var ^$ fuzzy
    ]

instance Shrinky Var where
  shrink = \case
    D_Var x ‚Üí D_Var ^$ shrink x
    N_Var x ‚Üí N_Var ^$ shrink x
    G_Var x ‚Üí G_Var ^$ shrink x

syntaxVar ‚à∑ LexerBasicSyntax
syntaxVar = concat
  [ syntaxName
  , syntaxDVar
  , syntaxNVar
  , syntaxGVar
  ]

pVar ‚à∑ CParser TokenBasic Var
pVar = concat
  [ D_Var ^$ pDVar
  , do x ‚Üê pName
       concat 
         [ N_Var ^$ pNVarTail x
         , G_Var ^$ pGVarTail x
         ]
  ]

---------------------------------------------------------------------
-- ======= --
-- DVarInf --
-- ======= --
---------------------------------------------------------------------

-- De Bruijn Variables with an extra "‚àû" element
data DVarInf =
    Var_DVI DVar
  | Inf_DVI
  deriving (Eq,Ord,Show)
makePrisms ''DVarInf

instance Pretty DVarInf where
  pretty = \case
    Var_DVI x ‚Üí pretty x
    Inf_DVI   ‚Üí ppPun "‚Ä¢:‚àû"

syntaxDVarInf ‚à∑ LexerBasicSyntax
syntaxDVarInf = concat
  [ syntaxDVar
  , null { lexerBasicSyntaxPuns = pow ["INF","‚àû"] }
  ]

pDVarInfTail ‚à∑ CParser  TokenBasic DVarInf
pDVarInfTail = concat
  [ Var_DVI ^$ pDVarTail
  , do void $ concat $ map cpSyntax ["INF","‚àû"]
       return Inf_DVI
  ]

pDVarInf ‚à∑ CParser TokenBasic DVarInf
pDVarInf = do
  void $ cpSyntax "‚Ä¢"
  void $ cpSyntax ":"
  pDVarInfTail

---------------------------------------------------------------------
-- ======= --
-- NVarInf --
-- ======= --
---------------------------------------------------------------------

-- Named Variables where indices have an extra ‚àû element
data NVarInf = NVarInf
  { nvarInfIndex ‚à∑ DVarInf
  , nvarInfName  ‚à∑ Name
  } deriving (Eq,Ord,Show)
makeLenses ''NVarInf

instance Pretty NVarInf where
  pretty (NVarInf n x) = concat
    [ pretty x
    , case n of
        Var_DVI n' | n' ‚â¢ DVar 0 ‚Üí ppBdr $ concat [":",showùïä $ unDVar n']
        _ ‚Üí null
    ]

syntaxNVarInf ‚à∑ LexerBasicSyntax
syntaxNVarInf = concat
  [ syntaxName
  , syntaxDVarInf
  ]

pNVarInfTail ‚à∑ Name ‚Üí CParser TokenBasic NVarInf
pNVarInfTail x = do
  void $ cpSyntax ":"
  n ‚Üê pDVarInfTail
  return $ NVarInf n x

pNVarInf ‚à∑ CParser TokenBasic NVarInf
pNVarInf = do
  x ‚Üê pName
  pNVarInfTail x

---------------------------------------------------------------------
-- ====== --
-- VarInf --
-- ====== --
---------------------------------------------------------------------

data VarInf =
    D_VarInf DVarInf
  | N_VarInf NVarInf
  | G_VarInf GVar
  deriving (Eq,Ord,Show)
makePrisms ''VarInf
makePrettyUnion ''VarInf

syntaxVarInf ‚à∑ LexerBasicSyntax
syntaxVarInf = concat
  [ syntaxDVarInf
  , syntaxNVarInf
  , syntaxGVar
  ]

pVarInf ‚à∑ CParser TokenBasic VarInf
pVarInf = concat
  [ D_VarInf ^$ pDVarInf
  , do x ‚Üê pName
       concat
         [ N_VarInf ^$ pNVarInfTail x
         , G_VarInf ^$ pGVarTail x
         ]
  ]

---------------------------------------------------------------------
-- ======== --
-- SVarView --
-- ======== --
---------------------------------------------------------------------

class SVarView s e | e‚Üís where
  svarL ‚à∑ s ‚Üí e ‚å≤ SVar

svarScopeL ‚à∑ ‚àÄ s e. (SVarView s e) ‚áí s ‚Üí SName ‚Üí e ‚å≤ DVar
svarScopeL s xO = 
  let ctor ‚à∑ DVar ‚Üí e
      ctor = case xO of
        D_SName ‚Üí \ n ‚Üí construct (svarL s) $ D_SVar n
        N_SName x ‚Üí \ n ‚Üí construct (svarL s) $ N_SVar $ NVar n x
      dtor ‚à∑ e ‚Üí ùëÇ DVar
      dtor = case xO of
        D_SName ‚Üí \ e ‚Üí view (d_SVarL ‚äö svarL s) e
        N_SName x ‚Üí \ e ‚Üí do
          NVar n x' ‚Üê view (n_SVarL ‚äö svarL s) e
          guard $ x ‚â° x'
          return n
  in prism ctor dtor
